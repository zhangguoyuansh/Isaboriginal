{"version":3,"file":"ngneat-transloco.js.map","sources":["ng://@ngneat/transloco/lib/transloco.loader.ts","ng://@ngneat/transloco/lib/helpers.ts","ng://@ngneat/transloco/lib/transloco.config.ts","ng://@ngneat/transloco/lib/transloco.transpiler.ts","ng://@ngneat/transloco/lib/transloco-missing-handler.ts","ng://@ngneat/transloco/lib/transloco.interceptor.ts","ng://@ngneat/transloco/lib/transloco-fallback-strategy.ts","ng://@ngneat/transloco/lib/merge-config.ts","ng://@ngneat/transloco/lib/shared.ts","ng://@ngneat/transloco/lib/resolve-loader.ts","ng://@ngneat/transloco/lib/get-fallbacks-loaders.ts","ng://@ngneat/transloco/lib/transloco.service.ts","ng://@ngneat/transloco/lib/loader-component.component.ts","ng://@ngneat/transloco/lib/template-handler.ts","ng://@ngneat/transloco/lib/transloco-lang.ts","ng://@ngneat/transloco/lib/transloco-loading-template.ts","ng://@ngneat/transloco/lib/transloco-scope.ts","ng://@ngneat/transloco/lib/lang-resolver.ts","ng://@ngneat/transloco/lib/scope-resolver.ts","ng://@ngneat/transloco/lib/transloco.directive.ts","ng://@ngneat/transloco/lib/transloco.pipe.ts","ng://@ngneat/transloco/lib/transloco.module.ts","ng://@ngneat/transloco/lib/transloco-testing.module.ts","ng://@ngneat/transloco/lib/browser-lang.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Translation } from './types';\n\nexport interface TranslocoLoader {\n  getTranslation(lang: string, data?: TranslocoLoaderData): Observable<Translation> | Promise<Translation>;\n}\n\nexport type TranslocoLoaderData = {\n  scope: string;\n};\n\nexport class DefaultLoader implements TranslocoLoader {\n  constructor(private translations: Map<string, Translation>) {}\n\n  getTranslation(lang: string): Observable<Translation> {\n    return of(this.translations.get(lang) || {});\n  }\n}\n\nexport const TRANSLOCO_LOADER = new InjectionToken<Translation>('TRANSLOCO_LOADER');\n","import { ProviderScope, Translation } from './types';\nimport flat from 'flat';\n\nexport function getValue(obj: object, path: string) {\n  /* For cases where the key is like: 'general.something.thing' */\n  if (obj && obj.hasOwnProperty(path)) {\n    return obj[path];\n  }\n  return path.split('.').reduce((p, c) => p && p[c], obj);\n}\n\nexport function setValue(obj: any, prop: string, val: any) {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const lastIndex = split.length - 1;\n\n  split.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n\nexport function size(collection) {\n  if (!collection) {\n    return 0;\n  }\n\n  if (Array.isArray(collection)) {\n    return collection.length;\n  }\n\n  if (isObject(collection)) {\n    return Object.keys(collection).length;\n  }\n\n  return !!collection ? collection.length : 0;\n}\n\nexport function isEmpty(collection) {\n  return size(collection) === 0;\n}\n\nexport function isFunction(val: any): val is Function {\n  return typeof val === 'function';\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(val: any): val is number {\n  return typeof val === 'number';\n}\n\nexport function isObject(item): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function coerceArray(val) {\n  return Array.isArray(val) ? val : [val];\n}\n\n/*\n * @example\n *\n * given: path-to-happiness => pathToHappiness\n * given: path_to_happiness => pathToHappiness\n * given: path-to_happiness => pathToHappiness\n *\n */\nexport function toCamelCase(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => (index == 0 ? word.toLowerCase() : word.toUpperCase()))\n    .replace(/\\s+|_|-|\\//g, '');\n}\n\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n\nexport function isNil(value: any) {\n  return value === null || value === undefined;\n}\n\nexport function isDefined(value: any) {\n  return isNil(value) === false;\n}\n\nexport function toNumber(value: number | string): number | null {\n  if (isNumber(value)) return value;\n\n  if (isString(value) && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n\n  return null;\n}\n\nexport function isScopeObject(item: any): item is ProviderScope {\n  return item && typeof item.scope === 'string';\n}\n\nexport function hasInlineLoader(item: any): item is ProviderScope {\n  return item && isObject(item.loader);\n}\n\nexport function unflatten(obj: Translation): Translation {\n  return flat.unflatten(obj, { safe: true });\n}\n\nexport function flatten(obj: Translation): Translation {\n  return flat(obj, { safe: true });\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { AvailableLangs, HashMap } from './types';\n\nexport type TranslocoConfig = {\n  defaultLang: string;\n  reRenderOnLangChange?: boolean;\n  prodMode?: boolean;\n  fallbackLang?: string | string[];\n  failedRetries?: number;\n  /** @deprecated */\n  scopeMapping?: HashMap<string>;\n  availableLangs?: AvailableLangs;\n  flatten?: {\n    aot?: boolean;\n  };\n  missingHandler?: {\n    logMissingKey?: boolean;\n    useFallbackTranslation?: boolean;\n    allowEmpty?: boolean;\n  };\n  interpolation?: [string, string];\n};\n\nexport const TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {\n  providedIn: 'root',\n  factory: () => {\n    return {};\n  }\n});\n\nexport const defaultConfig: TranslocoConfig = {\n  defaultLang: 'en',\n  reRenderOnLangChange: false,\n  prodMode: false,\n  failedRetries: 2,\n  availableLangs: [],\n  missingHandler: {\n    logMissingKey: true,\n    useFallbackTranslation: false,\n    allowEmpty: false\n  },\n  flatten: {\n    aot: false\n  },\n  interpolation: ['{{', '}}']\n};\n\n/**\n * @deprecated\n */\nexport function provideTranslocoConfig(config: Partial<TranslocoConfig> = defaultConfig): Provider {\n  return {\n    provide: TRANSLOCO_CONFIG,\n    useValue: { ...defaultConfig, ...config }\n  };\n}\n\n/**\n * Sets up TranslocoConfig object.\n *\n * @param config The partial config object to load, this is optional,\n * will be spread after defaultConfig.\n */\nexport function translocoConfig(config: Partial<TranslocoConfig> = defaultConfig): TranslocoConfig {\n  return { ...defaultConfig, ...config };\n}\n","import { Inject, Injectable, InjectionToken, Injector, Optional } from '@angular/core';\nimport { HashMap, Translation } from './types';\nimport { getValue, isDefined, isObject, isString, setValue } from './helpers';\nimport { defaultConfig, TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\n\nexport const TRANSLOCO_TRANSPILER = new InjectionToken('TRANSLOCO_TRANSPILER');\n\nexport interface TranslocoTranspiler {\n  transpile(value: any, params: HashMap, translation: HashMap): any;\n\n  onLangChanged?(lang: string): void;\n}\n\nexport class DefaultTranspiler implements TranslocoTranspiler {\n  protected interpolationMatcher: RegExp;\n\n  constructor(@Optional() @Inject(TRANSLOCO_CONFIG) userConfig?: TranslocoConfig) {\n    this.interpolationMatcher = resolveMatcher(userConfig);\n  }\n\n  transpile(value: any, params: HashMap = {}, translation: Translation): any {\n    if (isString(value)) {\n      return value.replace(this.interpolationMatcher, (_, match) => {\n        match = match.trim();\n        if (isDefined(params[match])) {\n          return params[match];\n        }\n\n        return isDefined(translation[match]) ? this.transpile(translation[match], params, translation) : '';\n      });\n    } else if (params) {\n      if (isObject(value)) {\n        value = this.handleObject(value, params, translation);\n      } else if (Array.isArray(value)) {\n        value = this.handleArray(value, params, translation);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   *\n   * @example\n   *\n   * const en = {\n   *  a: {\n   *    b: {\n   *      c: \"Hello {{ value }}\"\n   *    }\n   *  }\n   * }\n   *\n   * const params =  {\n   *  \"b.c\": { value: \"Transloco \"}\n   * }\n   *\n   * service.selectTranslate('a', params);\n   *\n   * // the first param will be the result of `en.a`.\n   * // the second param will be `params`.\n   * parser.transpile(value, params, {});\n   *\n   *\n   */\n  protected handleObject(value: any, params: HashMap = {}, translation: Translation) {\n    let result = value;\n\n    Object.keys(params).forEach(p => {\n      // get the value of \"b.c\" inside \"a\" => \"Hello {{ value }}\"\n      const v = getValue(result, p);\n      // get the params of \"b.c\" => { value: \"Transloco\" }\n      const getParams = getValue(params, p);\n\n      // transpile the value => \"Hello Transloco\"\n      const transpiled = this.transpile(v, getParams, translation);\n\n      // set \"b.c\" to `transpiled`\n      result = setValue(result, p, transpiled);\n    });\n\n    return result;\n  }\n\n  protected handleArray(value: string[], params: HashMap = {}, translation: Translation) {\n    return value.map(v => this.transpile(v, params, translation));\n  }\n}\n\nfunction resolveMatcher(userConfig?: TranslocoConfig): RegExp {\n  const [start, end] = userConfig && userConfig.interpolation ? userConfig.interpolation : defaultConfig.interpolation;\n\n  return new RegExp(`${start}(.*?)${end}`, 'g');\n}\n\nexport interface TranslocoTranspilerFunction {\n  transpile(...args: string[]): any;\n}\n\nexport function getFunctionArgs(argsString: string): string[] {\n  const splitted = argsString ? argsString.split(',') : [];\n  const args = [];\n  for (let i = 0; i < splitted.length; i++) {\n    let value = splitted[i].trim();\n    while (value[value.length - 1] === '\\\\') {\n      i++;\n      value = value.replace('\\\\', ',') + splitted[i];\n    }\n    args.push(value);\n  }\n\n  return args;\n}\n\n@Injectable()\nexport class FunctionalTranspiler extends DefaultTranspiler implements TranslocoTranspiler {\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  transpile(value: any, params: HashMap = {}, translation: Translation): any {\n    let transpiled = value;\n    if (isString(value)) {\n      transpiled = value.replace(/\\[\\[\\s*(\\w+)\\((.*)\\)\\s*]]/g, (match: string, functionName: string, args: string) => {\n        try {\n          const func: TranslocoTranspilerFunction = this.injector.get(functionName);\n\n          return func.transpile(...getFunctionArgs(args));\n        } catch (e) {\n          let message = `There is an error in: '${value}'. \n                          Check that the you used the right syntax in your translation and that the implementation of ${functionName} is correct.`;\n          if (e.message.includes('NullInjectorError')) {\n            message = `You are using the '${functionName}' function in your translation but no provider was found!`;\n          }\n          throw new Error(message);\n        }\n      });\n    }\n\n    return super.transpile(transpiled, params, translation);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { TranslocoConfig } from './transloco.config';\nimport { HashMap } from './types';\n\nexport const TRANSLOCO_MISSING_HANDLER = new InjectionToken('TRANSLOCO_MISSING_HANDLER');\n\nexport interface TranslocoMissingHandlerData extends TranslocoConfig {\n  activeLang: string;\n}\n\nexport interface TranslocoMissingHandler {\n  handle(key: string, data: TranslocoMissingHandlerData, params?: HashMap): any;\n}\n\nexport class DefaultHandler implements TranslocoMissingHandler {\n  handle(key: string, config: TranslocoConfig) {\n    if (config.missingHandler.logMissingKey && !config.prodMode) {\n      const msg = `Missing translation for '${key}'`;\n      console.warn(`%c ${msg}`, 'font-size: 12px; color: red');\n    }\n\n    return key;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Translation } from './types';\n\nexport const TRANSLOCO_INTERCEPTOR = new InjectionToken('TRANSLOCO_INTERCEPTOR');\n\nexport interface TranslocoInterceptor {\n  preSaveTranslation(translation: Translation, lang: string): Translation;\n\n  preSaveTranslationKey(key: string, value: string, lang: string): string;\n}\n\nexport class DefaultInterceptor implements TranslocoInterceptor {\n  preSaveTranslation(translation: Translation, lang: string): Translation {\n    return translation;\n  }\n\n  preSaveTranslationKey(key: string, value: string, lang: string): string {\n    return value;\n  }\n}\n","import { Inject, InjectionToken } from '@angular/core';\nimport { TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\n\nexport const TRANSLOCO_FALLBACK_STRATEGY = new InjectionToken<TranslocoFallbackStrategy>('TRANSLOCO_FALLBACK_STRATEGY');\n\nexport interface TranslocoFallbackStrategy {\n  getNextLangs(failedLang: string): string[];\n}\n\nexport class DefaultFallbackStrategy implements TranslocoFallbackStrategy {\n  constructor(@Inject(TRANSLOCO_CONFIG) private userConfig: TranslocoConfig) {}\n\n  getNextLangs(failedLang: string) {\n    const fallbackLang = this.userConfig.fallbackLang;\n    if (!fallbackLang) {\n      throw new Error('When using the default fallback, a fallback language must be provided in the config!');\n    }\n\n    return Array.isArray(fallbackLang) ? fallbackLang : [fallbackLang];\n  }\n}\n","import { TranslocoConfig } from './transloco.config';\n\nexport function mergeConfig(defaultConfig: TranslocoConfig, userConfig: Partial<TranslocoConfig>) {\n  return {\n    ...defaultConfig,\n    ...userConfig,\n    missingHandler: {\n      ...defaultConfig.missingHandler,\n      ...userConfig.missingHandler\n    },\n    flatten: {\n      ...defaultConfig.flatten,\n      ...userConfig.flatten\n    }\n  };\n}\n","import { TranslocoService } from './transloco.service';\nimport { hasInlineLoader, isString } from './helpers';\nimport { take } from 'rxjs/operators';\nimport { InlineLoader, TranslocoScope } from './types';\n\n/*\n * @example\n *\n * given: lazy-page/en => lazy-page\n *\n */\nexport function getScopeFromLang(lang: string): string {\n  if (!lang) {\n    return '';\n  }\n  const split = lang.split('/');\n  split.pop();\n  return split.join('/');\n}\n\n/*\n * @example\n *\n * given: lazy-page/en => en\n *\n */\nexport function getLangFromScope(lang: string): string {\n  if (!lang) {\n    return '';\n  }\n  const split = lang.split('/');\n  return split.pop();\n}\n\n/**\n * @example\n *\n * getPipeValue('todos|scoped', 'scoped') [true, 'todos']\n * getPipeValue('en|static', 'static') [true, 'en']\n * getPipeValue('en', 'static') [false, 'en']\n */\nexport function getPipeValue(str: string, value: string, char = '|'): [boolean, string] {\n  if (isString(str)) {\n    const splitted = str.split(char);\n    const lastItem = splitted.pop();\n    return lastItem === value ? [true, splitted.toString()] : [false, lastItem];\n  }\n\n  return [false, ''];\n}\n\nexport function shouldListenToLangChanges(service: TranslocoService, lang: string) {\n  const [hasStatic] = getPipeValue(lang, 'static');\n  if (hasStatic === false) {\n    // If we didn't get 'lang|static' check if it's set in the global level\n    return service.config.reRenderOnLangChange;\n  }\n\n  // We have 'lang|static' so don't listen to lang changes\n  return false;\n}\n\nexport function listenOrNotOperator(listenToLangChange: boolean) {\n  return listenToLangChange ? source => source : take(1);\n}\n\nfunction prependScope(inlineLoader, scope) {\n  return Object.keys(inlineLoader).reduce((acc, lang) => {\n    acc[`${scope}/${lang}`] = inlineLoader[lang];\n    return acc;\n  }, {});\n}\n\nexport function resolveInlineLoader(providerScope: TranslocoScope | null, scope: string): InlineLoader | null {\n  return hasInlineLoader(providerScope) ? prependScope(providerScope.loader, scope) : null;\n}\n\nexport function getEventPayload(lang: string) {\n  return {\n    scope: getScopeFromLang(lang) || null,\n    langName: getLangFromScope(lang),\n    lang\n  };\n}\n","import { TranslocoLoader, TranslocoLoaderData } from './transloco.loader';\nimport { InlineLoader } from './types';\nimport { isFunction } from './helpers';\n\nexport function resolveLoader(\n  path: string,\n  mainLoader: TranslocoLoader,\n  inlineLoader: InlineLoader,\n  data: TranslocoLoaderData\n) {\n  if (inlineLoader) {\n    const pathLoader = inlineLoader[path];\n    if (isFunction(pathLoader) === false) {\n      throw `You're using an inline loader but didn't provide a loader for ${path}`;\n    }\n\n    return inlineLoader[path]().then(res => (res.default ? res.default : res));\n  }\n\n  return mainLoader.getTranslation(path, data);\n}\n","import { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { resolveLoader } from './resolve-loader';\nimport { TranslocoLoader, TranslocoLoaderData } from './transloco.loader';\nimport { InlineLoader } from './types';\n\nexport function getFallbacksLoaders(\n  mainPath: string,\n  fallbackPath: string,\n  mainLoader: TranslocoLoader,\n  inlineLoader: InlineLoader,\n  data: TranslocoLoaderData\n) {\n  return [mainPath, fallbackPath].map(path => {\n    const loader = resolveLoader(path, mainLoader, inlineLoader, data);\n\n    return from(loader).pipe(\n      map(translation => ({\n        translation,\n        lang: path\n      }))\n    );\n  });\n}\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, combineLatest, EMPTY, forkJoin, from, Observable, of, Subject, Subscription } from 'rxjs';\nimport { catchError, map, retry, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { DefaultLoader, TRANSLOCO_LOADER, TranslocoLoader } from './transloco.loader';\nimport { TRANSLOCO_TRANSPILER, TranslocoTranspiler } from './transloco.transpiler';\nimport {\n  AvailableLangs,\n  HashMap,\n  InlineLoader,\n  LoadOptions,\n  ProviderScope,\n  SetTranslationOptions,\n  TranslateObjectParams,\n  TranslateParams,\n  Translation,\n  TranslocoEvents,\n  TranslocoScope\n} from './types';\nimport { flatten, isEmpty, isNil, isScopeObject, isString, size, toCamelCase, unflatten } from './helpers';\nimport { defaultConfig, TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\nimport {\n  TRANSLOCO_MISSING_HANDLER,\n  TranslocoMissingHandler,\n  TranslocoMissingHandlerData\n} from './transloco-missing-handler';\nimport { TRANSLOCO_INTERCEPTOR, TranslocoInterceptor } from './transloco.interceptor';\nimport { TRANSLOCO_FALLBACK_STRATEGY, TranslocoFallbackStrategy } from './transloco-fallback-strategy';\nimport { mergeConfig } from './merge-config';\nimport { getEventPayload, getLangFromScope, getScopeFromLang, resolveInlineLoader } from './shared';\nimport { getFallbacksLoaders } from './get-fallbacks-loaders';\nimport { resolveLoader } from './resolve-loader';\n\nlet service: TranslocoService;\n\nexport function translate<T = any>(key: TranslateParams, params: HashMap = {}, lang?: string): T {\n  return service.translate(key, params, lang);\n}\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoService implements OnDestroy {\n  private subscription: Subscription;\n  private translations = new Map<string, Translation>();\n  private cache = new Map<string, Observable<Translation>>();\n  private firstFallbackLang: string | null = null;\n  private defaultLang: string;\n  private mergedConfig: TranslocoConfig;\n  private availableLangs: AvailableLangs = [];\n  private isResolvedMissingOnce = false;\n  private lang: BehaviorSubject<string>;\n  langChanges$: Observable<string>;\n\n  private events = new Subject<TranslocoEvents>();\n  events$ = this.events.asObservable();\n\n  private failedLangs = new Set<string>();\n\n  constructor(\n    @Optional() @Inject(TRANSLOCO_LOADER) private loader: TranslocoLoader,\n    @Inject(TRANSLOCO_TRANSPILER) private parser: TranslocoTranspiler,\n    @Inject(TRANSLOCO_MISSING_HANDLER) private missingHandler: TranslocoMissingHandler,\n    @Inject(TRANSLOCO_INTERCEPTOR) private interceptor: TranslocoInterceptor,\n    @Inject(TRANSLOCO_CONFIG) private userConfig: TranslocoConfig,\n    @Inject(TRANSLOCO_FALLBACK_STRATEGY) private fallbackStrategy: TranslocoFallbackStrategy\n  ) {\n    if (!this.loader) {\n      this.loader = new DefaultLoader(this.translations);\n    }\n    service = this;\n    this.mergedConfig = mergeConfig(defaultConfig, userConfig);\n\n    this.setAvailableLangs(this.mergedConfig.availableLangs);\n    this.setFallbackLangForMissingTranslation(this.mergedConfig);\n    this.setDefaultLang(this.mergedConfig.defaultLang);\n    this.lang = new BehaviorSubject<string>(this.getDefaultLang());\n    // Don't use distinctUntilChanged as we need the ability to update\n    // the value when using setTranslation or setTranslationKeys\n    this.langChanges$ = this.lang.asObservable();\n\n    /**\n     * When we have a failure, we want to define the next language that succeeded as the active\n     */\n    this.subscription = this.events$.subscribe(e => {\n      if (e.type === 'translationLoadSuccess' && e.wasFailure) {\n        // Handle scoped lang\n        const lang = getLangFromScope(e.payload.lang);\n        this.setActiveLang(lang);\n      }\n    });\n  }\n\n  get config(): TranslocoConfig {\n    return this.mergedConfig;\n  }\n\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n\n  setDefaultLang(lang: string) {\n    this.defaultLang = lang;\n  }\n\n  getActiveLang() {\n    return this.lang.getValue();\n  }\n\n  setActiveLang(lang: string) {\n    this.lang.next(lang);\n    this.parser.onLangChanged && this.parser.onLangChanged(lang);\n    return this;\n  }\n\n  setAvailableLangs(langs: AvailableLangs) {\n    this.availableLangs = langs;\n  }\n\n  /**\n   * Gets the available languages.\n   *\n   * @returns\n   * An array of the available languages. Can be either a `string[]` or a `{ id: string; label: string }[]`\n   * depending on how the available languages are set in your module.\n   */\n  getAvailableLangs() {\n    return this.availableLangs;\n  }\n\n  load(path: string, options: LoadOptions = {}): Observable<Translation> {\n    if (this.cache.has(path) === false) {\n      let loadTranslation: Observable<Translation | { translation: Translation; lang: string }[]>;\n      const isScope = this._isLangScoped(path);\n      const scope = isScope ? getScopeFromLang(path) : null;\n      if (this.useFallbackTranslation(path)) {\n        // if the path is scope the fallback should be `scope/fallbackLang`;\n        const fallback = isScope ? `${scope}/${this.firstFallbackLang}` : this.firstFallbackLang;\n\n        const loaders = getFallbacksLoaders(path, fallback, this.loader, options.inlineLoader, { scope });\n        loadTranslation = forkJoin(loaders);\n      } else {\n        const loader = resolveLoader(path, this.loader, options.inlineLoader, { scope });\n        loadTranslation = from(loader);\n      }\n\n      const load$ = loadTranslation.pipe(\n        retry(this.config.failedRetries),\n        tap(translation => {\n          if (Array.isArray(translation)) {\n            translation.forEach(t => {\n              this.handleSuccess(t.lang, t.translation);\n              // Save the fallback in cache so we'll not create a redundant request\n              if (t.lang !== path) {\n                this.cache.set(t.lang, of({}));\n              }\n            });\n            return;\n          }\n          this.handleSuccess(path, translation);\n        }),\n        catchError(() => this.handleFailure(path, options)),\n        shareReplay(1)\n      );\n\n      this.cache.set(path, load$);\n    }\n\n    return this.cache.get(path);\n  }\n\n  /**\n   * Gets the instant translated value of a key\n   *\n   * @example\n   *\n   * translate<string>('hello')\n   * translate('hello', { value: 'value' })\n   * translate<string[]>(['hello', 'key'])\n   * translate('hello', { }, 'en')\n   * translate('scope.someKey', { }, 'en')\n   */\n  translate<T = any>(key: TranslateParams, params: HashMap = {}, lang = this.getActiveLang()): T {\n    if (!key) return key as any;\n\n    const { scope, resolveLang } = this.resolveLangAndScope(lang);\n\n    if (Array.isArray(key)) {\n      return key.map(k => this.translate(scope ? `${scope}.${k}` : k, params, resolveLang)) as any;\n    }\n\n    key = scope ? `${scope}.${key}` : key;\n\n    const translation = this.getTranslation(resolveLang);\n    const value = translation[key];\n\n    if (!value) {\n      return this._handleMissingKey(key, value, params);\n    }\n\n    return this.parser.transpile(value, params, translation);\n  }\n\n  /**\n   * Gets the translated value of a key as observable\n   *\n   * @example\n   *\n   * selectTranslate<string>('hello').subscribe(value => ...)\n   * selectTranslate<string>('hello', {}, 'es').subscribe(value => ...)\n   * selectTranslate<string>('hello', {}, 'todos').subscribe(value => ...)\n   * selectTranslate<string>('hello', {}, { scope: 'todos' }).subscribe(value => ...)\n   *\n   */\n  selectTranslate<T = any>(\n    key: TranslateParams,\n    params?: HashMap,\n    lang?: string | TranslocoScope,\n    _isObject = false\n  ): Observable<T> {\n    let inlineLoader = null;\n    const load = (lang, options?: LoadOptions) =>\n      this.load(lang, options).pipe(\n        map(() => (_isObject ? this.translateObject(key, params, lang) : this.translate(key, params, lang)))\n      );\n    if (isNil(lang)) {\n      return this.langChanges$.pipe(switchMap(lang => load(lang)));\n    }\n\n    if (isScopeObject(lang)) {\n      // it's a scope object.\n      const providerScope = lang as ProviderScope;\n      lang = providerScope.scope;\n      inlineLoader = resolveInlineLoader(providerScope, providerScope.scope);\n    }\n\n    lang = lang as string;\n    if (this.isLang(lang) || this.isScopeWithLang(lang)) {\n      return load(lang);\n    }\n    // it's a scope\n    const scope = lang;\n    return this.langChanges$.pipe(switchMap(lang => load(`${scope}/${lang}`, { inlineLoader })));\n  }\n\n  /**\n   * Whether the scope with lang\n   *\n   * @example\n   *\n   * todos/en => true\n   * todos => false\n   */\n  private isScopeWithLang(lang: string) {\n    return this.isLang(getLangFromScope(lang));\n  }\n\n  /**\n   * Translate the given path that returns an object\n   *\n   * @example\n   *\n   * service.translateObject('path.to.object', {'subpath': { value: 'someValue'}}) => returns translated object\n   *\n   */\n  translateObject<T = any>(key: string, params?: HashMap, lang?: string): T;\n  translateObject<T = any>(key: string[], params?: HashMap, lang?: string): T[];\n  translateObject<T = any>(key: TranslateParams, params?: HashMap, lang?: string): T | T[];\n  translateObject<T = any>(key: HashMap | Map<string, HashMap>, params?: null, lang?: string): T[];\n  translateObject<T = any>(key: TranslateObjectParams, params?: HashMap, lang = this.getActiveLang()): T | T[] {\n    if (isString(key) || Array.isArray(key)) {\n      if (Array.isArray(key)) {\n        return key.map(k => this.translateObject(scope ? `${scope}.${k}` : k, params, resolveLang)) as any;\n      }\n      const { resolveLang, scope } = this.resolveLangAndScope(lang);\n\n      const translation = this.getTranslation(resolveLang);\n      key = scope ? `${scope}.${key}` : key;\n\n      const value = unflatten(this.getObjectByKey(translation, key));\n      /* If an empty object was returned we want to try and translate the key as a string and not an object */\n      return isEmpty(value) ? this.translate(key, params, lang) : this.parser.transpile(value, params, translation);\n    }\n\n    const translations: T[] = [];\n    for (const [_key, _params] of this.getEntries(key)) {\n      translations.push(this.translateObject(_key, _params, lang));\n    }\n\n    return translations;\n  }\n\n  selectTranslateObject<T = any>(key: string, params?: HashMap, lang?: string): Observable<T>;\n  selectTranslateObject<T = any>(key: string[], params?: HashMap, lang?: string): Observable<T[]>;\n  selectTranslateObject<T = any>(key: HashMap | Map<string, HashMap>, params?: null, lang?: string): Observable<T[]>;\n  selectTranslateObject<T = any>(\n    key: TranslateObjectParams,\n    params?: HashMap,\n    lang?: string\n  ): Observable<T> | Observable<T[]> {\n    if (isString(key) || Array.isArray(key)) {\n      return this.selectTranslate<T>(key, params, lang, true);\n    }\n\n    const [[firstKey, firstParams], ...rest] = this.getEntries(key);\n\n    /* In order to avoid subscribing multiple times to the load language event by calling selectTranslateObject for each pair,\n     * we listen to when the first key has been translated (the language is loaded) and translate the rest synchronously */\n    return this.selectTranslateObject<T>(firstKey, firstParams, lang).pipe(\n      map(value => {\n        const translations = [value];\n        for (const [_key, _params] of rest) {\n          translations.push(this.translateObject<T>(_key, _params, lang));\n        }\n\n        return translations;\n      })\n    );\n  }\n\n  /**\n   * Gets an object of translations for a given language\n   *\n   * @example\n   *\n   * getTranslation()\n   * getTranslation('en')\n   * getTranslation('admin-page/en')\n   */\n  getTranslation(): Map<string, Translation>;\n  getTranslation(langOrScope: string): Translation;\n  getTranslation(langOrScope?: string): Map<string, Translation> | Translation {\n    if (langOrScope) {\n      if (this.isLang(langOrScope)) {\n        return this.translations.get(langOrScope) || {};\n      } else {\n        // This is a scope, build the scope value from the translation object\n        const { scope, resolveLang } = this.resolveLangAndScope(langOrScope);\n        const translation = this.translations.get(resolveLang) || {};\n\n        return this.getObjectByKey(translation, scope);\n      }\n    }\n\n    return this.translations;\n  }\n\n  /**\n   * Gets an object of translations for a given language\n   *\n   * @example\n   *\n   * selectTranslation().subscribe() - will return the current lang translation\n   * selectTranslation('es').subscribe()\n   * selectTranslation('admin-page').subscribe() - will return the current lang scope translation\n   * selectTranslation('admin-page/es').subscribe()\n   */\n  selectTranslation(lang?: string): Observable<Translation> {\n    let language$ = this.langChanges$;\n    if (lang) {\n      const scopeLangSpecified = getLangFromScope(lang) !== lang;\n      if (this.isLang(lang) || scopeLangSpecified) {\n        language$ = of(lang);\n      } else {\n        language$ = this.langChanges$.pipe(map(currentLang => `${lang}/${currentLang}`));\n      }\n    }\n\n    return language$.pipe(switchMap(language => this.load(language).pipe(map(() => this.getTranslation(language)))));\n  }\n\n  /**\n   * Sets or merge a given translation object to current lang\n   *\n   * @example\n   *\n   * setTranslation({ ... })\n   * setTranslation({ ... }, 'en')\n   * setTranslation({ ... }, 'es', { merge: false } )\n   * setTranslation({ ... }, 'todos/en', { merge: false } )\n   */\n  setTranslation(translation: Translation, lang = this.getActiveLang(), options: SetTranslationOptions = {}) {\n    const defaults = { merge: true, emitChange: true };\n    const mergedOptions = { ...defaults, ...options };\n    const scope = getScopeFromLang(lang);\n\n    /**\n     * If this isn't a scope we use the whole translation as is\n     * otherwise we need to flat the scope and use it\n     */\n    let flattenScopeOrTranslation = translation;\n\n    // Merged the scoped language into the active language\n    if (scope) {\n      const key = this.getMappedScope(scope);\n      flattenScopeOrTranslation = flatten({ [key]: translation });\n    }\n\n    const currentLang = scope ? getLangFromScope(lang) : lang;\n\n    const mergedTranslation = {\n      ...(mergedOptions.merge && this.getTranslation(currentLang)),\n      ...flattenScopeOrTranslation\n    };\n\n    const flattenTranslation = this.mergedConfig.flatten.aot ? mergedTranslation : flatten(mergedTranslation);\n    const withHook = this.interceptor.preSaveTranslation(flattenTranslation, currentLang);\n    this.translations.set(currentLang, withHook);\n    mergedOptions.emitChange && this.setActiveLang(this.getActiveLang());\n  }\n\n  /**\n   * Sets translation key with given value\n   *\n   * @example\n   *\n   * setTranslationKey('key', 'value')\n   * setTranslationKey('key.nested', 'value')\n   * setTranslationKey('key.nested', 'value', 'en')\n   */\n  setTranslationKey(key: string, value: string, lang = this.getActiveLang()) {\n    const withHook = this.interceptor.preSaveTranslationKey(key, value, lang);\n    const newValue = {\n      ...this.getTranslation(lang),\n      [key]: withHook\n    };\n\n    this.setTranslation(newValue, lang);\n  }\n\n  /**\n   * Sets the fallback lang for the currently active language\n   * @param fallbackLang\n   */\n  setFallbackLangForMissingTranslation({ fallbackLang }: Pick<TranslocoConfig, 'fallbackLang'>): void {\n    const lang = Array.isArray(fallbackLang) ? fallbackLang[0] : fallbackLang;\n    if (this.useFallbackTranslation(lang) && fallbackLang) {\n      this.firstFallbackLang = lang;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _handleMissingKey(key: string, value: any, params?: HashMap) {\n    if (this.config.missingHandler.allowEmpty && value === '') {\n      return '';\n    }\n\n    if (this.useFallbackTranslation() && !this.isResolvedMissingOnce) {\n      // We need to set it to true to prevent a loop\n      this.isResolvedMissingOnce = true;\n      const fallbackValue = this.translate(key, params, this.firstFallbackLang);\n      this.isResolvedMissingOnce = false;\n      return fallbackValue;\n    }\n\n    return this.missingHandler.handle(key, this.getMissingHandlerData(), params);\n  }\n\n  /**\n   * @internal\n   */\n  _isLangScoped(lang: string) {\n    return this.getAvailableLangsIds().indexOf(lang) === -1;\n  }\n\n  /**\n   * Checks if a given string is one of the specified available languages.\n   * @returns\n   * True if the given string is an available language.\n   * False if the given string is not an available language.\n   */\n  isLang(lang: string): boolean {\n    return this.getAvailableLangsIds().indexOf(lang) !== -1;\n  }\n\n  /**\n   * @internal\n   *\n   * We always want to make sure the global lang is loaded\n   * before loading the scope since you can access both via the pipe/directive.\n   */\n  _loadDependencies(path: string, inlineLoader?: InlineLoader): Observable<Translation | Translation[]> {\n    const mainLang = getLangFromScope(path);\n\n    if (this._isLangScoped(path) && !this.isLoadedTranslation(mainLang)) {\n      return combineLatest(this.load(mainLang), this.load(path, { inlineLoader }));\n    }\n    return this.load(path, { inlineLoader });\n  }\n\n  /**\n   * @internal\n   */\n  _completeScopeWithLang(langOrScope: string) {\n    if (this._isLangScoped(langOrScope) && !this.isLang(getLangFromScope(langOrScope))) {\n      return `${langOrScope}/${this.getActiveLang()}`;\n    }\n    return langOrScope;\n  }\n\n  /**\n   * @internal\n   */\n  _setScopeAlias(scope: string, alias: string) {\n    if (!this.mergedConfig.scopeMapping) {\n      this.mergedConfig.scopeMapping = {};\n    }\n    this.mergedConfig.scopeMapping[scope] = alias;\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  private isLoadedTranslation(lang: string) {\n    return size(this.getTranslation(lang));\n  }\n\n  private getAvailableLangsIds(): string[] {\n    const first = this.getAvailableLangs()[0];\n\n    if (isString(first)) {\n      return this.getAvailableLangs() as string[];\n    }\n\n    return (this.getAvailableLangs() as { id: string }[]).map(l => l.id);\n  }\n\n  private getMissingHandlerData(): TranslocoMissingHandlerData {\n    return {\n      ...this.config,\n      activeLang: this.getActiveLang(),\n      availableLangs: this.availableLangs,\n      defaultLang: this.defaultLang\n    };\n  }\n\n  /**\n   * Use a fallback translation set for missing keys of the primary language\n   * This is unrelated to the fallback language (which changes the active language)\n   */\n  private useFallbackTranslation(lang?: string) {\n    return this.config.missingHandler.useFallbackTranslation && lang !== this.firstFallbackLang;\n  }\n\n  private handleSuccess(lang: string, translation: Translation) {\n    this.setTranslation(translation, lang, { emitChange: false });\n    this.events.next({\n      wasFailure: !!this.failedLangs.size,\n      type: 'translationLoadSuccess',\n      payload: getEventPayload(lang)\n    });\n    this.failedLangs.forEach(l => this.cache.delete(l));\n    this.failedLangs.clear();\n  }\n\n  private handleFailure(lang: string, loadOptions: LoadOptions) {\n    // When starting to load a first choice language, initialize\n    // the failed counter and resolve the fallback langs.\n    if (isNil(loadOptions.failedCounter)) {\n      loadOptions.failedCounter = 0;\n\n      if (!loadOptions.fallbackLangs) {\n        loadOptions.fallbackLangs = this.fallbackStrategy.getNextLangs(lang);\n      }\n    }\n\n    const splitted = lang.split('/');\n    const fallbacks = loadOptions.fallbackLangs;\n    const nextLang = fallbacks[loadOptions.failedCounter];\n    this.failedLangs.add(lang);\n\n    // This handles the case where a loaded fallback language is requested again\n    if (this.cache.has(nextLang)) {\n      this.handleSuccess(nextLang, this.getTranslation(nextLang));\n      return EMPTY;\n    }\n\n    const isFallbackLang = nextLang === splitted[splitted.length - 1];\n\n    if (!nextLang || isFallbackLang) {\n      let msg = `Unable to load translation and all the fallback languages`;\n      if (splitted.length > 1) {\n        msg += `, did you misspelled the scope name?`;\n      }\n\n      throw new Error(msg);\n    }\n\n    let resolveLang = nextLang;\n    // if it's scoped lang\n    if (splitted.length > 1) {\n      // We need to resolve it to:\n      // todos/langNotExists => todos/nextLang\n      splitted[splitted.length - 1] = nextLang;\n      resolveLang = splitted.join('/');\n    }\n\n    loadOptions.failedCounter++;\n    this.events.next({\n      type: 'translationLoadFailure',\n      payload: getEventPayload(lang)\n    });\n\n    return this.load(resolveLang, loadOptions);\n  }\n\n  private getMappedScope(scope: string): string {\n    const { scopeMapping = {} } = this.config;\n    return scopeMapping[scope] || toCamelCase(scope);\n  }\n\n  /**\n   * If lang is scope we need to check the following cases:\n   * todos/es => in this case we should take `es` as lang\n   * todos => in this case we should set the active lang as lang\n   */\n  private resolveLangAndScope(lang: string) {\n    let resolveLang = lang;\n    let scope;\n\n    if (this._isLangScoped(lang)) {\n      // en for example\n      const langFromScope = getLangFromScope(lang);\n      // en is lang\n      const hasLang = this.isLang(langFromScope);\n      // take en\n      resolveLang = hasLang ? langFromScope : this.getActiveLang();\n      // find the scope\n      scope = this.getMappedScope(hasLang ? getScopeFromLang(lang) : lang);\n    }\n    return { scope, resolveLang };\n  }\n\n  private getObjectByKey(translation: Translation, key: string) {\n    const result = {};\n    const prefix = `${key}.`;\n\n    for (const currentKey in translation) {\n      if (currentKey.startsWith(prefix)) {\n        result[currentKey.replace(prefix, '')] = translation[currentKey];\n      }\n    }\n\n    return result;\n  }\n\n  private getEntries(key: HashMap | Map<string, HashMap>) {\n    return key instanceof Map ? key.entries() : Object.entries(key);\n  }\n}\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  template: `\r\n    <div class=\"transloco-loader-template\" [innerHTML]=\"html\"></div>\r\n  `\r\n})\r\nexport class TranslocoLoaderComponent {\r\n  @Input() html: string;\r\n}\r\n","import { ComponentRef, TemplateRef, ViewContainerRef, ComponentFactoryResolver, Injector, Type } from '@angular/core';\r\nimport { isString } from './helpers';\r\nimport { TranslocoLoaderComponent } from './loader-component.component';\r\n\r\nexport type View = string | TemplateRef<any> | Type<any>;\r\n\r\nexport class TemplateHandler {\r\n  private injector: Injector;\r\n\r\n  constructor(private view: View, private vcr: ViewContainerRef) {\r\n    this.injector = this.vcr.injector;\r\n  }\r\n\r\n  attachView() {\r\n    if (this.view instanceof TemplateRef) {\r\n      this.vcr.createEmbeddedView(this.view);\r\n    } else if (isString(this.view)) {\r\n      const componentRef = this.createComponent<TranslocoLoaderComponent>(TranslocoLoaderComponent);\r\n      componentRef.instance.html = this.view;\r\n      componentRef.hostView.detectChanges();\r\n    } else {\r\n      this.createComponent(this.view);\r\n    }\r\n  }\r\n\r\n  detachView() {\r\n    this.vcr.clear();\r\n  }\r\n\r\n  private createComponent<T>(cmp: Type<any>): ComponentRef<T> {\r\n    const cfr = this.injector.get(ComponentFactoryResolver);\r\n    const factory = cfr.resolveComponentFactory(cmp);\r\n\r\n    return this.vcr.createComponent(factory);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport const TRANSLOCO_LANG = new InjectionToken<string>('TRANSLOCO_LANG');\n","import { InjectionToken, ComponentRef } from '@angular/core';\n\nexport const TRANSLOCO_LOADING_TEMPLATE = new InjectionToken<{ component: ComponentRef<any> | string }>(\n  'TRANSLOCO_LOADING_TEMPLATE'\n);\n","import { InjectionToken } from '@angular/core';\nimport { TranslocoScope } from './types';\n\nexport const TRANSLOCO_SCOPE = new InjectionToken<TranslocoScope>('TRANSLOCO_SCOPE');\n","import { getLangFromScope, getPipeValue, getScopeFromLang } from './shared';\n\ntype LangResolverParams = {\n  inline: string | undefined;\n  provider: string | undefined;\n  active: string | undefined;\n};\n\nexport class LangResolver {\n  initialized = false;\n\n  // inline => provider => active\n  resolve(\n    { inline, provider, active }: LangResolverParams = { inline: undefined, provider: undefined, active: undefined }\n  ) {\n    let lang = active;\n    /**\n     * When the user changes the lang we need to update\n     * the view. Otherwise, the lang will remain the inline/provided lang\n     */\n    if (this.initialized) {\n      lang = active;\n      return lang;\n    }\n\n    if (provider) {\n      const [_, extracted] = getPipeValue(provider, 'static');\n      lang = extracted;\n    }\n\n    if (inline) {\n      const [_, extracted] = getPipeValue(inline, 'static');\n      lang = extracted;\n    }\n\n    this.initialized = true;\n    return lang;\n  }\n\n  /**\n   *\n   * Resolve the lang\n   *\n   * @example\n   *\n   * resolveLangBasedOnScope('todos/en') => en\n   * resolveLangBasedOnScope('en') => en\n   *\n   */\n  resolveLangBasedOnScope(lang: string) {\n    const scope = getScopeFromLang(lang);\n    return scope ? getLangFromScope(lang) : lang;\n  }\n\n  /**\n   *\n   * Resolve the lang path for loading\n   *\n   * @example\n   *\n   * resolveLangPath('todos', 'en') => todos/en\n   * resolveLangPath('en') => en\n   *\n   */\n  resolveLangPath(lang: string, scope: string | undefined) {\n    return scope ? `${scope}/${lang}` : lang;\n  }\n}\n","import { TranslocoScope, ProviderScope, MaybeArray } from './types';\nimport { TranslocoService } from './transloco.service';\nimport { isScopeObject, toCamelCase } from './helpers';\n\ntype ScopeResolverParams = {\n  inline: string | undefined;\n  provider: MaybeArray<TranslocoScope>;\n};\n\nexport class ScopeResolver {\n  constructor(private translocoService: TranslocoService) {}\n\n  // inline => provider\n  resolve({ inline, provider }: ScopeResolverParams = { inline: undefined, provider: undefined }): string {\n    if (inline) {\n      return inline;\n    }\n\n    if (provider) {\n      if (isScopeObject(provider)) {\n        const { scope, alias = toCamelCase(scope) } = provider as ProviderScope;\n        this.translocoService._setScopeAlias(scope, alias);\n        return scope;\n      }\n\n      return provider as string;\n    }\n\n    return undefined;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  TemplateRef,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\nimport { forkJoin, Observable, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { TemplateHandler, View } from './template-handler';\nimport { TRANSLOCO_LANG } from './transloco-lang';\nimport { TRANSLOCO_LOADING_TEMPLATE } from './transloco-loading-template';\nimport { TRANSLOCO_SCOPE } from './transloco-scope';\nimport { TranslocoService } from './transloco.service';\nimport { HashMap, MaybeArray, Translation, TranslocoScope } from './types';\nimport { listenOrNotOperator, resolveInlineLoader, shouldListenToLangChanges } from './shared';\nimport { LangResolver } from './lang-resolver';\nimport { ScopeResolver } from './scope-resolver';\n\n@Directive({\n  selector: '[transloco]'\n})\nexport class TranslocoDirective implements OnInit, OnDestroy, OnChanges {\n  subscription: Subscription | null;\n  view: EmbeddedViewRef<any>;\n  private translationMemo: { [key: string]: { value: any; params: HashMap } } = {};\n\n  @Input('transloco') key: string;\n  @Input('translocoParams') params: HashMap = {};\n  @Input('translocoScope') inlineScope: string | undefined;\n  @Input('translocoRead') inlineRead: string | undefined;\n  @Input('translocoLang') inlineLang: string | undefined;\n  @Input('translocoLoadingTpl') inlineTpl: TemplateRef<any> | undefined;\n\n  private currentLang: string;\n  private loaderTplHandler: TemplateHandler = null;\n  // Whether we already rendered the view once\n  private initialized = false;\n  private path: string;\n  private langResolver = new LangResolver();\n  private scopeResolver = new ScopeResolver(this.translocoService);\n\n  constructor(\n    private translocoService: TranslocoService,\n    @Optional() private tpl: TemplateRef<{ $implicit: (key: string, params?: HashMap) => any }>,\n    @Optional() @Inject(TRANSLOCO_SCOPE) private providerScope: MaybeArray<TranslocoScope>,\n    @Optional() @Inject(TRANSLOCO_LANG) private providerLang: string | null,\n    @Optional() @Inject(TRANSLOCO_LOADING_TEMPLATE) private providedLoadingTpl: Type<any> | string,\n    private vcr: ViewContainerRef,\n    private cdr: ChangeDetectorRef,\n    private host: ElementRef\n  ) {}\n\n  ngOnInit() {\n    const listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang || this.inlineLang);\n\n    this.subscription = this.translocoService.langChanges$\n      .pipe(\n        switchMap(activeLang => {\n          const lang = this.langResolver.resolve({\n            inline: this.inlineLang,\n            provider: this.providerLang,\n            active: activeLang\n          });\n\n          return Array.isArray(this.providerScope)\n            ? forkJoin(\n                (<TranslocoScope[]>this.providerScope).map(providerScope => this.resolveScope(lang, providerScope))\n              )\n            : this.resolveScope(lang, this.providerScope);\n        }),\n        listenOrNotOperator(listenToLangChange)\n      )\n      .subscribe(() => {\n        this.currentLang = this.langResolver.resolveLangBasedOnScope(this.path);\n        this.tpl === null ? this.simpleStrategy() : this.structuralStrategy(this.currentLang, this.inlineRead);\n        this.cdr.markForCheck();\n        this.initialized = true;\n      });\n\n    const loadingTpl = this.getLoadingTpl();\n    if (!this.initialized && loadingTpl) {\n      this.loaderTplHandler = new TemplateHandler(loadingTpl, this.vcr);\n      this.loaderTplHandler.attachView();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // We need to support dynamic keys/params, so if this is not the first change CD cycle\n    // we need to run the function again in order to update the value\n    const notInit = Object.keys(changes).some(v => changes[v].firstChange === false);\n    notInit && this.simpleStrategy();\n  }\n\n  private simpleStrategy() {\n    this.detachLoader();\n    this.host.nativeElement.innerText = this.translocoService.translate(this.key, this.params, this.currentLang);\n  }\n\n  private structuralStrategy(lang: string, read: string | undefined) {\n    this.translationMemo = {};\n\n    if (this.view) {\n      // when the lang changes we need to change the reference so Angular will update the view\n      this.view.context['$implicit'] = this.getTranslateFn(lang, read);\n    } else {\n      this.detachLoader();\n      this.view = this.vcr.createEmbeddedView(this.tpl, {\n        $implicit: this.getTranslateFn(lang, read)\n      });\n    }\n  }\n\n  private getTranslateFn(lang: string, read: string | undefined): (key: string, params?: HashMap) => any {\n    return (key: string, params: HashMap) => {\n      const withRead = read ? `${read}.${key}` : key;\n      const withParams = params ? `${withRead}${JSON.stringify(params)}` : withRead;\n      if (this.translationMemo.hasOwnProperty(withParams)) {\n        return this.translationMemo[withParams].value;\n      }\n      this.translationMemo[withParams] = {\n        params,\n        value: this.translocoService.translate(withRead, params, lang)\n      };\n\n      return this.translationMemo[withParams].value;\n    };\n  }\n\n  private getLoadingTpl(): View {\n    return this.inlineTpl || this.providedLoadingTpl;\n  }\n\n  ngOnDestroy() {\n    this.subscription && this.subscription.unsubscribe();\n  }\n\n  private detachLoader() {\n    this.loaderTplHandler && this.loaderTplHandler.detachView();\n  }\n\n  private resolveScope(lang: string, providerScope: TranslocoScope): Observable<Translation | Translation[]> {\n    let resolvedScope = this.scopeResolver.resolve({ inline: this.inlineScope, provider: providerScope });\n    this.path = this.langResolver.resolveLangPath(lang, resolvedScope);\n    const inlineLoader = resolveInlineLoader(providerScope, resolvedScope);\n    return this.translocoService._loadDependencies(this.path, inlineLoader);\n  }\n}\n","import { ChangeDetectorRef, Inject, OnDestroy, Optional, Pipe, PipeTransform } from '@angular/core';\nimport { TranslocoService } from './transloco.service';\nimport { HashMap, MaybeArray, Translation, TranslocoScope } from './types';\nimport { switchMap } from 'rxjs/operators';\nimport { forkJoin, Observable, Subscription } from 'rxjs';\nimport { TRANSLOCO_SCOPE } from './transloco-scope';\nimport { TRANSLOCO_LANG } from './transloco-lang';\nimport { listenOrNotOperator, resolveInlineLoader, shouldListenToLangChanges } from './shared';\nimport { LangResolver } from './lang-resolver';\nimport { ScopeResolver } from './scope-resolver';\n\n@Pipe({\n  name: 'transloco',\n  pure: false\n})\nexport class TranslocoPipe implements PipeTransform, OnDestroy {\n  private subscription: Subscription | null = null;\n  private lastValue: string = '';\n  private lastKey: string | undefined;\n  private listenToLangChange: boolean;\n  private path: string;\n  private langResolver = new LangResolver();\n  private scopeResolver = new ScopeResolver(this.translocoService);\n\n  constructor(\n    private translocoService: TranslocoService,\n    @Optional() @Inject(TRANSLOCO_SCOPE) private providerScope: MaybeArray<TranslocoScope>,\n    @Optional() @Inject(TRANSLOCO_LANG) private providerLang: string | null,\n    private cdr: ChangeDetectorRef\n  ) {\n    this.listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang);\n  }\n\n  // null is for handling strict mode + async pipe types https://github.com/ngneat/transloco/issues/311\n  transform(key: string | null, params?: HashMap | undefined, inlineLang?: string | undefined): string {\n    if (!key) {\n      return key;\n    }\n\n    const keyName = params ? `${key}${JSON.stringify(params)}` : key;\n\n    if (keyName === this.lastKey) {\n      return this.lastValue;\n    }\n\n    this.lastKey = keyName;\n    this.subscription && this.subscription.unsubscribe();\n\n    this.subscription = this.translocoService.langChanges$\n      .pipe(\n        switchMap(activeLang => {\n          const lang = this.langResolver.resolve({\n            inline: inlineLang,\n            provider: this.providerLang,\n            active: activeLang\n          });\n\n          return Array.isArray(this.providerScope)\n            ? forkJoin(\n                (<TranslocoScope[]>this.providerScope).map(providerScope => this.resolveScope(lang, providerScope))\n              )\n            : this.resolveScope(lang, this.providerScope);\n        }),\n        listenOrNotOperator(this.listenToLangChange)\n      )\n      .subscribe(() => this.updateValue(key, params));\n\n    return this.lastValue;\n  }\n\n  ngOnDestroy() {\n    this.subscription && this.subscription.unsubscribe();\n  }\n\n  private updateValue(key: string, params?: HashMap | undefined) {\n    const lang = this.langResolver.resolveLangBasedOnScope(this.path);\n    this.lastValue = this.translocoService.translate(key, params, lang);\n    this.cdr.markForCheck();\n  }\n\n  private resolveScope(lang: string, providerScope: TranslocoScope): Observable<Translation | Translation[]> {\n    let resolvedScope = this.scopeResolver.resolve({ inline: undefined, provider: providerScope });\n    this.path = this.langResolver.resolveLangPath(lang, resolvedScope);\n    const inlineLoader = resolveInlineLoader(providerScope, resolvedScope);\n    return this.translocoService._loadDependencies(this.path, inlineLoader);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TranslocoLoaderComponent } from './loader-component.component';\nimport { TranslocoDirective } from './transloco.directive';\nimport { DefaultTranspiler, TRANSLOCO_TRANSPILER } from './transloco.transpiler';\nimport { TranslocoPipe } from './transloco.pipe';\nimport { DefaultHandler, TRANSLOCO_MISSING_HANDLER } from './transloco-missing-handler';\nimport { DefaultInterceptor, TRANSLOCO_INTERCEPTOR } from './transloco.interceptor';\nimport { DefaultFallbackStrategy, TRANSLOCO_FALLBACK_STRATEGY } from './transloco-fallback-strategy';\nimport { TRANSLOCO_CONFIG } from './transloco.config';\n\nexport const defaultProviders = [\n  {\n    provide: TRANSLOCO_TRANSPILER,\n    useClass: DefaultTranspiler,\n    deps: [TRANSLOCO_CONFIG]\n  },\n  {\n    provide: TRANSLOCO_MISSING_HANDLER,\n    useClass: DefaultHandler\n  },\n  {\n    provide: TRANSLOCO_INTERCEPTOR,\n    useClass: DefaultInterceptor\n  },\n  {\n    provide: TRANSLOCO_FALLBACK_STRATEGY,\n    useClass: DefaultFallbackStrategy,\n    deps: [TRANSLOCO_CONFIG]\n  }\n];\n\n@NgModule({\n  declarations: [TranslocoDirective, TranslocoPipe, TranslocoLoaderComponent],\n  providers: [defaultProviders],\n  exports: [TranslocoDirective, TranslocoPipe],\n  entryComponents: [TranslocoLoaderComponent]\n})\nexport class TranslocoModule {}\n","import { APP_INITIALIZER, Inject, Injectable, InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { TRANSLOCO_LOADER, TranslocoLoader } from './transloco.loader';\nimport { HashMap, Translation } from './types';\nimport { Observable, of } from 'rxjs';\nimport { defaultProviders, TranslocoModule } from './transloco.module';\nimport { TRANSLOCO_CONFIG, TranslocoConfig, translocoConfig } from './transloco.config';\nimport { TranslocoService } from './transloco.service';\n\nexport interface TranslocoTestingOptions {\n  translocoConfig?: Partial<TranslocoConfig>;\n  preloadLangs?: boolean;\n  langs?: HashMap<Translation>;\n}\n\nconst TRANSLOCO_TEST_LANGS = new InjectionToken<HashMap<Translation>>(\n  'TRANSLOCO_TEST_LANGS - Available testing languages'\n);\nconst TRANSLOCO_TEST_OPTIONS = new InjectionToken<TranslocoTestingOptions>('TRANSLOCO_TEST_OPTIONS - Testing options');\n\n@Injectable()\nexport class TestingLoader implements TranslocoLoader {\n  constructor(@Inject(TRANSLOCO_TEST_LANGS) private langs: HashMap<Translation>) {}\n\n  getTranslation(lang: string): Observable<Translation> | Promise<Translation> {\n    return of(this.langs[lang]);\n  }\n}\n\nexport function initTranslocoService(\n  service: TranslocoService,\n  langs: HashMap<Translation> = {},\n  options: TranslocoTestingOptions\n) {\n  const preloadAllLangs = () =>\n    options.preloadLangs\n      ? Promise.all(Object.keys(langs).map(lang => service.load(lang).toPromise()))\n      : Promise.resolve();\n\n  return preloadAllLangs;\n}\n\n@NgModule({\n  exports: [TranslocoModule]\n})\nexport class TranslocoTestingModule {\n  static forRoot(options: TranslocoTestingOptions) {\n    return {\n      ngModule: TranslocoTestingModule,\n      providers: [\n        {\n          provide: TRANSLOCO_TEST_LANGS,\n          useValue: options.langs\n        },\n        {\n          provide: TRANSLOCO_TEST_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initTranslocoService,\n          deps: [TranslocoService, TRANSLOCO_TEST_LANGS, TRANSLOCO_TEST_OPTIONS],\n          multi: true\n        },\n        {\n          provide: TRANSLOCO_LOADER,\n          useClass: TestingLoader\n        },\n        defaultProviders,\n        {\n          provide: TRANSLOCO_CONFIG,\n          useValue: translocoConfig({\n            prodMode: true,\n            missingHandler: { logMissingKey: false },\n            ...options.translocoConfig\n          })\n        }\n      ]\n    };\n  }\n\n  /** @deprecated - use forRoot instead */\n  static withLangs(\n    langs: HashMap<Translation>,\n    config: Partial<TranslocoConfig> = {},\n    options: TranslocoTestingOptions = {}\n  ): ModuleWithProviders<TranslocoTestingModule> {\n    return {\n      ngModule: TranslocoTestingModule,\n      providers: [\n        {\n          provide: TRANSLOCO_TEST_LANGS,\n          useValue: langs\n        },\n        {\n          provide: TRANSLOCO_TEST_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initTranslocoService,\n          deps: [TranslocoService, TRANSLOCO_TEST_LANGS, TRANSLOCO_TEST_OPTIONS],\n          multi: true\n        },\n        {\n          provide: TRANSLOCO_LOADER,\n          useClass: TestingLoader\n        },\n        defaultProviders,\n        {\n          provide: TRANSLOCO_CONFIG,\n          useValue: translocoConfig({\n            prodMode: true,\n            missingHandler: { logMissingKey: false },\n            ...config\n          })\n        }\n      ]\n    };\n  }\n}\n","import { isBrowser } from './helpers';\n\n/**\n * Returns the language code name from the browser, e.g. \"en\"\n */\nexport function getBrowserLang(): string | undefined {\n  let browserLang = getBrowserCultureLang();\n  if (isBrowser() === false || !browserLang) {\n    return undefined;\n  }\n\n  if (browserLang.indexOf('-') !== -1) {\n    browserLang = browserLang.split('-')[0];\n  }\n\n  if (browserLang.indexOf('_') !== -1) {\n    browserLang = browserLang.split('_')[0];\n  }\n\n  return browserLang;\n}\n\n/**\n * Returns the culture language code name from the browser, e.g. \"en-US\"\n */\nexport function getBrowserCultureLang(): string {\n  if (isBrowser() === false) {\n    return undefined;\n  }\n\n  const navigator = window.navigator as any;\n  let browserCultureLang = navigator.languages ? navigator.languages[0] : null;\n  browserCultureLang = browserCultureLang || navigator.language || navigator.browserLanguage || navigator.userLanguage;\n\n  return browserCultureLang;\n}\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
