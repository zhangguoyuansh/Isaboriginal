/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export { translate, TranslocoService } from './lib/transloco.service';
export { TranslocoDirective } from './lib/transloco.directive';
export { TranslocoPipe } from './lib/transloco.pipe';
export { TranslocoModule, defaultProviders } from './lib/transloco.module';
export { TRANSLOCO_LOADER } from './lib/transloco.loader';
export { TRANSLOCO_CONFIG, defaultConfig, provideTranslocoConfig, translocoConfig } from './lib/transloco.config';
export { TRANSLOCO_TRANSPILER, DefaultTranspiler, FunctionalTranspiler, getFunctionArgs } from './lib/transloco.transpiler';
export { TRANSLOCO_SCOPE } from './lib/transloco-scope';
export { TRANSLOCO_LOADING_TEMPLATE } from './lib/transloco-loading-template';
export { TRANSLOCO_LANG } from './lib/transloco-lang';
export { TestingLoader, TranslocoTestingModule } from './lib/transloco-testing.module';
export { TemplateHandler } from './lib/template-handler';
export { TRANSLOCO_INTERCEPTOR } from './lib/transloco.interceptor';
export { TRANSLOCO_FALLBACK_STRATEGY, DefaultFallbackStrategy } from './lib/transloco-fallback-strategy';
export { TRANSLOCO_MISSING_HANDLER } from './lib/transloco-missing-handler';
export { getBrowserCultureLang, getBrowserLang } from './lib/browser-lang';
export {} from './lib/types';
export { getValue, setValue, size, isEmpty, isFunction, isString, isNumber, isObject, coerceArray, toCamelCase, isBrowser, isNil, isDefined, toNumber, isScopeObject, hasInlineLoader, unflatten, flatten } from './lib/helpers';
export { getPipeValue } from './lib/shared';
export { getLangFromScope } from './lib/shared';
export { getScopeFromLang } from './lib/shared';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWFwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsicHVibGljLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBbUIsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRSxPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixzQkFBc0IsRUFDdEIsZUFBZSxFQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsaUJBQWlCLEVBRWpCLG9CQUFvQixFQUNwQixlQUFlLEVBRWhCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLHNCQUFzQixFQUEyQixNQUFNLGdDQUFnQyxDQUFDO0FBQ2hILE9BQU8sRUFBRSxlQUFlLEVBQVEsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUscUJBQXFCLEVBQXdCLE1BQU0sNkJBQTZCLENBQUM7QUFDMUYsT0FBTyxFQUNMLDJCQUEyQixFQUUzQix1QkFBdUIsRUFDeEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEVBRzFCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNFLGVBQWMsYUFBYSxDQUFDO0FBQzVCLGlOQUFjLGVBQWUsQ0FBQztBQUU5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB0cmFuc2xhdGUsIFRyYW5zbG9jb1NlcnZpY2UgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uc2VydmljZSc7XG5leHBvcnQgeyBUcmFuc2xvY29EaXJlY3RpdmUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uZGlyZWN0aXZlJztcbmV4cG9ydCB7IFRyYW5zbG9jb1BpcGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ucGlwZSc7XG5leHBvcnQgeyBUcmFuc2xvY29Nb2R1bGUsIGRlZmF1bHRQcm92aWRlcnMgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ubW9kdWxlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MT0FERVIsIFRyYW5zbG9jb0xvYWRlciB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5sb2FkZXInO1xuZXhwb3J0IHtcbiAgVHJhbnNsb2NvQ29uZmlnLFxuICBUUkFOU0xPQ09fQ09ORklHLFxuICBkZWZhdWx0Q29uZmlnLFxuICBwcm92aWRlVHJhbnNsb2NvQ29uZmlnLFxuICB0cmFuc2xvY29Db25maWdcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLmNvbmZpZyc7XG5leHBvcnQge1xuICBUUkFOU0xPQ09fVFJBTlNQSUxFUixcbiAgRGVmYXVsdFRyYW5zcGlsZXIsXG4gIFRyYW5zbG9jb1RyYW5zcGlsZXIsXG4gIEZ1bmN0aW9uYWxUcmFuc3BpbGVyLFxuICBnZXRGdW5jdGlvbkFyZ3MsXG4gIFRyYW5zbG9jb1RyYW5zcGlsZXJGdW5jdGlvblxufSBmcm9tICcuL2xpYi90cmFuc2xvY28udHJhbnNwaWxlcic7XG5leHBvcnQgeyBUcmFuc2xhdGlvbiwgRmFpbGVkRXZlbnQsIEhhc2hNYXAsIExvYWRlZEV2ZW50LCBUcmFuc2xvY29FdmVudHMgfSBmcm9tICcuL2xpYi90eXBlcyc7XG5leHBvcnQgeyBUUkFOU0xPQ09fU0NPUEUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tc2NvcGUnO1xuZXhwb3J0IHsgVFJBTlNMT0NPX0xPQURJTkdfVEVNUExBVEUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tbG9hZGluZy10ZW1wbGF0ZSc7XG5leHBvcnQgeyBUUkFOU0xPQ09fTEFORyB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1sYW5nJztcbmV4cG9ydCB7IFRlc3RpbmdMb2FkZXIsIFRyYW5zbG9jb1Rlc3RpbmdNb2R1bGUsIFRyYW5zbG9jb1Rlc3RpbmdPcHRpb25zIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLXRlc3RpbmcubW9kdWxlJztcbmV4cG9ydCB7IFRlbXBsYXRlSGFuZGxlciwgVmlldyB9IGZyb20gJy4vbGliL3RlbXBsYXRlLWhhbmRsZXInO1xuZXhwb3J0IHsgVFJBTlNMT0NPX0lOVEVSQ0VQVE9SLCBUcmFuc2xvY29JbnRlcmNlcHRvciB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5pbnRlcmNlcHRvcic7XG5leHBvcnQge1xuICBUUkFOU0xPQ09fRkFMTEJBQ0tfU1RSQVRFR1ksXG4gIFRyYW5zbG9jb0ZhbGxiYWNrU3RyYXRlZ3ksXG4gIERlZmF1bHRGYWxsYmFja1N0cmF0ZWd5XG59IGZyb20gJy4vbGliL3RyYW5zbG9jby1mYWxsYmFjay1zdHJhdGVneSc7XG5leHBvcnQge1xuICBUUkFOU0xPQ09fTUlTU0lOR19IQU5ETEVSLFxuICBUcmFuc2xvY29NaXNzaW5nSGFuZGxlcixcbiAgVHJhbnNsb2NvTWlzc2luZ0hhbmRsZXJEYXRhXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby1taXNzaW5nLWhhbmRsZXInO1xuZXhwb3J0IHsgZ2V0QnJvd3NlckN1bHR1cmVMYW5nLCBnZXRCcm93c2VyTGFuZyB9IGZyb20gJy4vbGliL2Jyb3dzZXItbGFuZyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9oZWxwZXJzJztcbmV4cG9ydCB7IFByb3ZpZGVyU2NvcGUgfSBmcm9tICcuL2xpYi90eXBlcyc7XG5leHBvcnQgeyBnZXRQaXBlVmFsdWUgfSBmcm9tICcuL2xpYi9zaGFyZWQnO1xuZXhwb3J0IHsgZ2V0TGFuZ0Zyb21TY29wZSB9IGZyb20gJy4vbGliL3NoYXJlZCc7XG5leHBvcnQgeyBnZXRTY29wZUZyb21MYW5nIH0gZnJvbSAnLi9saWIvc2hhcmVkJztcbiJdfQ==