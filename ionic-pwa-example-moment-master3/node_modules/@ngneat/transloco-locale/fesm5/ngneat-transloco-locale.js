import { BehaviorSubject } from 'rxjs';
import { map, distinctUntilChanged, filter } from 'rxjs/operators';
import { __extends, __assign, __read } from 'tslib';
import { InjectionToken, Injectable, Inject, NgModule, Pipe, ChangeDetectorRef, defineInjectable, inject } from '@angular/core';
import { toNumber, TranslocoService, isNil } from '@ngneat/transloco';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
/**
 * check if a given value is in BCP 47 language tag.
 *
 * isLocaleFormat('en') // false,
 * isLocaleFormat('En-us') // false
 * isLocaleFormat('en-US') // true
 * @param {?} val
 * @return {?}
 */
function isLocaleFormat(val) {
    /** @type {?} */
    var irregulars = "en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE|art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang|zh-Hans|zh-hant";
    /** @type {?} */
    var BCPFormat = "[a-z]{2}-[A-Z]{2}";
    return typeof val === 'string' && !!val.match(RegExp("(" + irregulars + ")|(" + BCPFormat + ")"));
}
/**
 * @param {?} value
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function localizeNumber(value, locale, options) {
    /** @type {?} */
    var number = toNumber(value);
    return number !== null ? new Intl.NumberFormat(locale, options).format(number) : '';
}
/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function localizeDate(date, locale, options) {
    if (isDate(date)) {
        return new Intl.DateTimeFormat(locale, options).format(date);
    }
    return '';
}
/**
 * @param {?} value
 * @return {?}
 */
function isDate(value) {
    return value instanceof Date && !isNaN((/** @type {?} */ (value)));
}
/**
 * @param {?} value
 * @return {?}
 */
function toDate(value) {
    /** @type {?} */
    var match;
    if (typeof value === 'string') {
        value = value.trim();
    }
    if (isDate(value)) {
        return value;
    }
    if (!isNaN(value - parseFloat(value))) {
        return new Date(parseFloat(value));
    }
    if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
        var _a = __read(value.split('-').map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return parseInt(val, 10); })), 3), y = _a[0], m = _a[1], d = _a[2];
        return new Date(y, m - 1, d);
    }
    if (typeof value === 'string' && (match = value.match(ISO8601_DATE_REGEX))) {
        return isoStringToDate(match);
    }
    return new Date(value);
}
/**
 * @param {?} match
 * @return {?}
 */
function isoStringToDate(match) {
    /** @type {?} */
    var date = new Date(0);
    /** @type {?} */
    var tzHour = 0;
    /** @type {?} */
    var tzMin = 0;
    /** @type {?} */
    var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    /** @type {?} */
    var timeSetter = match[8] ? date.setUTCHours : date.setHours;
    if (match[9]) {
        tzHour = +(match[9] + match[10]);
        tzMin = +(match[9] + match[11]);
    }
    dateSetter.call(date, +match[1], +match[2] - 1, +match[3]);
    /** @type {?} */
    var h = +(match[4] || '0') - tzHour;
    /** @type {?} */
    var m = +(match[5] || '0') - tzMin;
    /** @type {?} */
    var s = +(match[6] || '0');
    /** @type {?} */
    var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} locale
 * @param {?} type
 * @param {?} localeConfig
 * @return {?}
 */
function getDefaultOptions(locale, type, localeConfig) {
    /** @type {?} */
    var defaultConfig = localeConfig.global ? localeConfig.global[type] : {};
    /** @type {?} */
    var settings = localeConfig.localeBased ? localeConfig.localeBased[locale] : {};
    return settings && settings[type] ? __assign({}, defaultConfig, settings[type]) : defaultConfig;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/locale-currency.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LOCALE_CURRENCY = {
    'aa-DJ': 'DJF',
    'aa-ER': 'ERN',
    'aa-ET': 'ETB',
    'ab-GE': 'ETB',
    'ab-TR': 'ETB',
    'af-BW': 'ETB',
    'af-NA': 'ETB',
    'af-ZA': 'ZAR',
    'ak-GH': 'ZAR',
    'am-ET': 'ETB',
    'am-IL': 'ETB',
    'ar-AE': 'AED',
    'ar-AR': 'AED',
    'ar-BH': 'BHD',
    'ar-CM': 'BHD',
    'ar-CY': 'BHD',
    'ar-DJ': 'BHD',
    'ar-DZ': 'DZD',
    'ar-EG': 'EGP',
    'ar-EH': 'EGP',
    'ar-ER': 'EGP',
    'ar-IL': 'EGP',
    'ar-IQ': 'IQD',
    'ar-IR': 'IQD',
    'ar-JO': 'JOD',
    'ar-KE': 'JOD',
    'ar-KM': 'JOD',
    'ar-KW': 'KWD',
    'ar-LB': 'LBP',
    'ar-LY': 'LYD',
    'ar-MA': 'MAD',
    'ar-ML': 'MAD',
    'ar-MR': 'MAD',
    'ar-NE': 'MAD',
    'ar-NG': 'MAD',
    'ar-OM': 'OMR',
    'ar-PS': 'OMR',
    'ar-QA': 'QAR',
    'ar-SA': 'SAR',
    'ar-SD': 'SDD',
    'ar-SS': 'SDD',
    'ar-SY': 'SYP',
    'ar-TD': 'SYP',
    'ar-TJ': 'SYP',
    'ar-TN': 'TND',
    'ar-TR': 'TND',
    'ar-YE': 'YER',
    'as-IN': 'INR',
    'av-RU': 'INR',
    'ay-BO': 'INR',
    'ay-PE': 'INR',
    'az-AZ': 'AZM',
    'ba-RU': 'AZM',
    'be-BY': 'BYR',
    'be-PL': 'BYR',
    'be-UA': 'BYR',
    'bg-BG': 'BGN',
    'bg-GR': 'BGN',
    'bg-MD': 'BGN',
    'bg-RO': 'BGN',
    'bg-TR': 'BGN',
    'bg-UA': 'BGN',
    'bi-VU': 'BGN',
    'bm-ML': 'BGN',
    'bn-BD': 'BDT',
    'bn-GB': 'BDT',
    'bn-IN': 'INR',
    'bn-NP': 'INR',
    'bo-CN': 'CNY',
    'bo-IN': 'INR',
    'bo-NP': 'INR',
    'br-FR': 'EUR',
    'bs-BA': 'BAM',
    'ca-AD': 'EUR',
    'ca-ES': 'EUR',
    'ca-FR': 'EUR',
    'ca-IT': 'EUR',
    'ce-RU': 'EUR',
    'ch-GU': 'EUR',
    'ch-MP': 'EUR',
    'co-FR': 'EUR',
    'cs-CZ': 'CZK',
    'cv-RU': 'RUB',
    'cy-AR': 'RUB',
    'cy-GB': 'GBP',
    'da-DE': 'GBP',
    'da-DK': 'DKK',
    'da-GL': 'DKK',
    'da-IS': 'DKK',
    'de-AT': 'EUR',
    'de-BE': 'EUR',
    'de-BR': 'EUR',
    'de-CA': 'EUR',
    'de-CH': 'CHF',
    'de-CZ': 'CHF',
    'de-DE': 'EUR',
    'de-DK': 'EUR',
    'de-HU': 'EUR',
    'de-IT': 'EUR',
    'de-KZ': 'EUR',
    'de-LI': 'EUR',
    'de-LU': 'EUR',
    'de-NA': 'EUR',
    'de-PL': 'EUR',
    'de-PY': 'EUR',
    'de-RO': 'EUR',
    'de-SK': 'EUR',
    'de-US': 'EUR',
    'dv-IN': 'EUR',
    'dv-MV': 'MVR',
    'dz-BT': 'BTN',
    'dz-IN': 'BTN',
    'ee-GH': 'BTN',
    'ee-TG': 'BTN',
    'el-AL': 'BTN',
    'el-CY': 'EUR',
    'el-DE': 'EUR',
    'el-EG': 'EUR',
    'el-GB': 'EUR',
    'el-GR': 'EUR',
    'el-IT': 'EUR',
    'el-RO': 'EUR',
    'el-TR': 'EUR',
    'el-UA': 'EUR',
    'en-AC': 'EUR',
    'en-AG': 'XCD',
    'en-AI': 'XCD',
    'en-AS': 'XCD',
    'en-AU': 'AUD',
    'en-AW': 'AUD',
    'en-BB': 'AUD',
    'en-BE': 'AUD',
    'en-BM': 'AUD',
    'en-BN': 'AUD',
    'en-BS': 'AUD',
    'en-BW': 'BWP',
    'en-BZ': 'BWP',
    'en-CA': 'CAD',
    'en-CC': 'CAD',
    'en-CK': 'CAD',
    'en-CM': 'CAD',
    'en-CN': 'CAD',
    'en-CX': 'CAD',
    'en-DE': 'CAD',
    'en-DG': 'CAD',
    'en-DM': 'CAD',
    'en-DO': 'CAD',
    'en-ES': 'CAD',
    'en-ET': 'CAD',
    'en-FI': 'CAD',
    'en-FJ': 'CAD',
    'en-FK': 'CAD',
    'en-FM': 'CAD',
    'en-FR': 'CAD',
    'en-GB': 'GBP',
    'en-GD': 'GBP',
    'en-GG': 'GBP',
    'en-GH': 'GBP',
    'en-GI': 'GBP',
    'en-GM': 'GBP',
    'en-GU': 'GBP',
    'en-GY': 'GBP',
    'en-HK': 'HKD',
    'en-HN': 'HKD',
    'en-IE': 'EUR',
    'en-IL': 'EUR',
    'en-IM': 'EUR',
    'en-IN': 'INR',
    'en-IO': 'INR',
    'en-IT': 'INR',
    'en-JE': 'INR',
    'en-JM': 'INR',
    'en-KE': 'INR',
    'en-KI': 'INR',
    'en-KN': 'INR',
    'en-KY': 'INR',
    'en-LB': 'INR',
    'en-LC': 'INR',
    'en-LK': 'INR',
    'en-LR': 'INR',
    'en-LS': 'INR',
    'en-MG': 'INR',
    'en-MH': 'INR',
    'en-MP': 'INR',
    'en-MS': 'INR',
    'en-MT': 'INR',
    'en-MU': 'INR',
    'en-MW': 'INR',
    'en-MY': 'INR',
    'en-NA': 'INR',
    'en-NF': 'INR',
    'en-NG': 'NGN',
    'en-NL': 'NGN',
    'en-NR': 'NGN',
    'en-NU': 'NGN',
    'en-NZ': 'NZD',
    'en-PA': 'NZD',
    'en-PG': 'NZD',
    'en-PH': 'PHP',
    'en-PI': 'PHP',
    'en-PK': 'PHP',
    'en-PM': 'PHP',
    'en-PN': 'PHP',
    'en-PR': 'PHP',
    'en-PW': 'PHP',
    'en-RW': 'PHP',
    'en-SB': 'PHP',
    'en-SC': 'PHP',
    'en-SG': 'SGD',
    'en-SH': 'SGD',
    'en-SL': 'SGD',
    'en-SS': 'SGD',
    'en-SZ': 'SGD',
    'en-TA': 'SGD',
    'en-TC': 'SGD',
    'en-TK': 'SGD',
    'en-TO': 'SGD',
    'en-TT': 'SGD',
    'en-TV': 'SGD',
    'en-TZ': 'SGD',
    'en-UD': 'SGD',
    'en-UG': 'SGD',
    'en-UM': 'SGD',
    'en-US': 'USD',
    'en-VC': 'USD',
    'en-VG': 'USD',
    'en-VI': 'USD',
    'en-VU': 'USD',
    'en-WS': 'USD',
    'en-ZA': 'ZAR',
    'en-ZM': 'ZAR',
    'en-ZW': 'ZWD',
    'eo-EO': 'ZWD',
    'eo-SM': 'ZWD',
    'es-AD': 'ZWD',
    'es-AR': 'ARS',
    'es-BO': 'BOB',
    'es-BZ': 'BOB',
    'es-CL': 'CLP',
    'es-CO': 'COP',
    'es-CR': 'CRC',
    'es-CU': 'CRC',
    'es-DE': 'CRC',
    'es-DO': 'DOP',
    'es-EA': 'DOP',
    'es-EC': 'USD',
    'es-ES': 'EUR',
    'es-GQ': 'EUR',
    'es-GT': 'GTQ',
    'es-HN': 'HNL',
    'es-IC': 'HNL',
    'es-LA': 'HNL',
    'es-MA': 'HNL',
    'es-MX': 'MXN',
    'es-NI': 'NIO',
    'es-PA': 'PAB',
    'es-PE': 'PEN',
    'es-PH': 'PEN',
    'es-PR': 'USD',
    'es-PY': 'PYG',
    'es-SV': 'SVC',
    'es-TT': 'SVC',
    'es-US': 'USD',
    'es-UY': 'UYU',
    'es-VE': 'VEB',
    'et-EE': 'EEK',
    'et-FI': 'EEK',
    'eu-ES': 'EUR',
    'eu-FR': 'EUR',
    'fa-AE': 'EUR',
    'fa-AF': 'EUR',
    'fa-IQ': 'EUR',
    'fa-IR': 'IRR',
    'fa-OM': 'IRR',
    'fa-PK': 'IRR',
    'fa-QA': 'IRR',
    'fa-TJ': 'IRR',
    'fb-LT': 'IRR',
    'ff-GN': 'IRR',
    'ff-MR': 'IRR',
    'ff-SN': 'IRR',
    'fi-FI': 'EUR',
    'fi-RU': 'EUR',
    'fi-SE': 'EUR',
    'fj-FJ': 'EUR',
    'fo-FO': 'DKK',
    'fr-AD': 'DKK',
    'fr-BE': 'EUR',
    'fr-BF': 'EUR',
    'fr-BI': 'EUR',
    'fr-BJ': 'EUR',
    'fr-BL': 'EUR',
    'fr-CA': 'CAD',
    'fr-CD': 'CAD',
    'fr-CF': 'CAD',
    'fr-CG': 'CAD',
    'fr-CH': 'CHF',
    'fr-CI': 'CHF',
    'fr-CM': 'CHF',
    'fr-CP': 'CHF',
    'fr-DJ': 'CHF',
    'fr-DZ': 'CHF',
    'fr-FR': 'EUR',
    'fr-GA': 'EUR',
    'fr-GB': 'EUR',
    'fr-GF': 'EUR',
    'fr-GN': 'EUR',
    'fr-GP': 'EUR',
    'fr-GQ': 'EUR',
    'fr-HT': 'EUR',
    'fr-IT': 'EUR',
    'fr-KM': 'EUR',
    'fr-LB': 'EUR',
    'fr-LU': 'EUR',
    'fr-MA': 'EUR',
    'fr-MC': 'EUR',
    'fr-MF': 'EUR',
    'fr-MG': 'EUR',
    'fr-ML': 'EUR',
    'fr-MQ': 'EUR',
    'fr-MR': 'EUR',
    'fr-MU': 'EUR',
    'fr-NC': 'EUR',
    'fr-NE': 'EUR',
    'fr-PF': 'EUR',
    'fr-PM': 'EUR',
    'fr-RE': 'EUR',
    'fr-RW': 'EUR',
    'fr-SC': 'EUR',
    'fr-SN': 'EUR',
    'fr-SY': 'EUR',
    'fr-TD': 'EUR',
    'fr-TF': 'EUR',
    'fr-TG': 'EUR',
    'fr-TN': 'EUR',
    'fr-US': 'EUR',
    'fr-VU': 'EUR',
    'fr-WF': 'EUR',
    'fr-YT': 'EUR',
    'fy-NL': 'EUR',
    'ga-GB': 'EUR',
    'ga-IE': 'EUR',
    'gd-GB': 'GBP',
    'gl-ES': 'EUR',
    'gl-PT': 'EUR',
    'gn-AR': 'EUR',
    'gn-BO': 'EUR',
    'gn-PY': 'EUR',
    'gu-IN': 'INR',
    'gu-KE': 'INR',
    'gv-IM': 'INR',
    'he-IL': 'ILS',
    'hi-FJ': 'ILS',
    'hi-IN': 'INR',
    'hi-NP': 'INR',
    'hi-UG': 'INR',
    'hi-ZA': 'INR',
    'ho-PG': 'INR',
    'hr-AT': 'INR',
    'hr-BA': 'INR',
    'hr-DE': 'INR',
    'hr-HR': 'HRK',
    'hr-HU': 'HRK',
    'hr-IT': 'HRK',
    'ht-HT': 'HTG',
    'hu-AT': 'HTG',
    'hu-HU': 'HUF',
    'hu-IL': 'HUF',
    'hu-RO': 'HUF',
    'hu-RS': 'HUF',
    'hu-SI': 'HUF',
    'hu-SK': 'HUF',
    'hu-UA': 'HUF',
    'hy-AM': 'AMD',
    'hy-CY': 'AMD',
    'hy-GE': 'AMD',
    'hy-IR': 'AMD',
    'hy-LB': 'AMD',
    'hy-SY': 'AMD',
    'hy-TR': 'AMD',
    'ia-SE': 'AMD',
    'id-ID': 'IDR',
    'id-NL': 'IDR',
    'ig-NG': 'NGN',
    'ii-CN': 'NGN',
    'ik-US': 'NGN',
    'is-IS': 'ISK',
    'it-AU': 'ISK',
    'it-BR': 'ISK',
    'it-CA': 'ISK',
    'it-CH': 'CHF',
    'it-DE': 'CHF',
    'it-FR': 'CHF',
    'it-GB': 'CHF',
    'it-HR': 'CHF',
    'it-IT': 'EUR',
    'it-SI': 'EUR',
    'it-SM': 'EUR',
    'it-US': 'EUR',
    'it-VA': 'EUR',
    'iu-GL': 'EUR',
    'ja-BR': 'EUR',
    'ja-JP': 'JPY',
    'jv-ID': 'JPY',
    'jv-MY': 'JPY',
    'ka-GE': 'GEL',
    'ka-IR': 'GEL',
    'ka-TR': 'GEL',
    'kg-CD': 'GEL',
    'ki-KE': 'GEL',
    'kj-NA': 'GEL',
    'kl-DK': 'GEL',
    'kl-GL': 'DKK',
    'km-KH': 'KHR',
    'kn-IN': 'INR',
    'ko-BR': 'INR',
    'ko-CN': 'INR',
    'ko-JP': 'INR',
    'ko-KP': 'INR',
    'ko-KR': 'KRW',
    'ko-US': 'KRW',
    'ks-GB': 'KRW',
    'ks-IN': 'INR',
    'ks-PK': 'INR',
    'ku-TR': 'TRY',
    'kw-GB': 'GBP',
    'la-VA': 'GBP',
    'lb-LU': 'GBP',
    'lg-UG': 'UGX',
    'li-NL': 'EUR',
    'ln-CD': 'EUR',
    'ln-CG': 'EUR',
    'lo-LA': 'LAK',
    'lt-LT': 'LTL',
    'lu-CD': 'LTL',
    'lv-LV': 'LVL',
    'mg-MG': 'MGA',
    'mh-MH': 'MGA',
    'mi-NZ': 'NZD',
    'mk-AL': 'NZD',
    'mk-GR': 'NZD',
    'mk-MK': 'MKD',
    'ml-AE': 'MKD',
    'ml-BH': 'MKD',
    'ml-GB': 'MKD',
    'ml-IL': 'MKD',
    'ml-IN': 'INR',
    'ml-MY': 'INR',
    'ml-QA': 'INR',
    'ml-SG': 'INR',
    'mr-IN': 'INR',
    'ms-BN': 'INR',
    'ms-CC': 'INR',
    'ms-ID': 'INR',
    'ms-MY': 'MYR',
    'ms-SG': 'MYR',
    'mt-MT': 'EUR',
    'my-BD': 'EUR',
    'my-MM': 'MMK',
    'na-NR': 'MMK',
    'nb-NO': 'NOK',
    'nb-SJ': 'NOK',
    'nd-ZW': 'NOK',
    'ne-BT': 'NOK',
    'ne-IN': 'NOK',
    'ne-NP': 'INR',
    'ng-NA': 'INR',
    'nl-AW': 'AWG',
    'nl-BE': 'EUR',
    'nl-DE': 'EUR',
    'nl-FR': 'EUR',
    'nl-NL': 'EUR',
    'nl-SR': 'EUR',
    'nn-NO': 'NOK',
    'nr-ZA': 'ZAR',
    'nv-US': 'ZAR',
    'ny-MW': 'ZAR',
    'ny-MZ': 'ZAR',
    'ny-ZM': 'ZAR',
    'ny-ZW': 'ZAR',
    'oc-FR': 'EUR',
    'om-ET': 'ETB',
    'om-KE': 'KES',
    'om-SO': 'KES',
    'or-IN': 'INR',
    'os-GE': 'INR',
    'pa-IN': 'INR',
    'pl-CZ': 'INR',
    'pl-DE': 'INR',
    'pl-IL': 'INR',
    'pl-PL': 'PLN',
    'pl-RO': 'PLN',
    'pl-SK': 'PLN',
    'pl-UA': 'PLN',
    'ps-AE': 'PLN',
    'ps-AF': 'AFN',
    'ps-IR': 'AFN',
    'ps-PK': 'AFN',
    'pt-AG': 'AFN',
    'pt-AO': 'AFN',
    'pt-BR': 'BRL',
    'pt-CV': 'BRL',
    'pt-FR': 'BRL',
    'pt-GW': 'BRL',
    'pt-MO': 'BRL',
    'pt-MZ': 'BRL',
    'pt-PT': 'EUR',
    'pt-ST': 'EUR',
    'pt-TL': 'EUR',
    'qu-BO': 'EUR',
    'qu-PE': 'EUR',
    'rm-CH': 'EUR',
    'rn-BI': 'EUR',
    'ro-HU': 'EUR',
    'ro-IL': 'EUR',
    'ro-MD': 'EUR',
    'ro-RO': 'RON',
    'ro-RS': 'RON',
    'ro-UA': 'RON',
    'ru-BY': 'RON',
    'ru-CN': 'RON',
    'ru-DE': 'RON',
    'ru-EE': 'RON',
    'ru-FI': 'RON',
    'ru-GE': 'RON',
    'ru-IL': 'RON',
    'ru-KG': 'RON',
    'ru-KZ': 'RON',
    'ru-LT': 'RON',
    'ru-LV': 'RON',
    'ru-MD': 'RON',
    'ru-MN': 'RON',
    'ru-RU': 'RUB',
    'ru-SJ': 'RUB',
    'ru-TM': 'RUB',
    'ru-UA': 'UAH',
    'ru-US': 'UAH',
    'ru-UZ': 'UAH',
    'rw-CD': 'UAH',
    'rw-RW': 'RWF',
    'rw-UG': 'RWF',
    'sa-IN': 'INR',
    'se-FI': 'INR',
    'se-NO': 'NOK',
    'se-SE': 'NOK',
    'sg-CF': 'NOK',
    'si-LK': 'LKR',
    'sk-HU': 'LKR',
    'sk-RS': 'LKR',
    'sk-SK': 'EUR',
    'sl-AT': 'EUR',
    'sl-HU': 'EUR',
    'sl-IT': 'EUR',
    'sl-SI': 'EUR',
    'sm-AS': 'EUR',
    'sm-WS': 'EUR',
    'sn-ZW': 'EUR',
    'so-DJ': 'DJF',
    'so-ET': 'ETB',
    'so-KE': 'ETB',
    'so-SO': 'SOS',
    'sq-AL': 'ALL',
    'sq-GR': 'ALL',
    'sq-ME': 'ALL',
    'sq-MK': 'MKD',
    'sq-RS': 'MKD',
    'sq-TR': 'MKD',
    'sr-RS': 'RSD',
    'ss-LS': 'RSD',
    'ss-SZ': 'RSD',
    'ss-ZA': 'ZAR',
    'st-LS': 'ZAR',
    'st-ZA': 'ZAR',
    'su-ID': 'ZAR',
    'sv-AX': 'ZAR',
    'sv-FI': 'EUR',
    'sv-SE': 'SEK',
    'sw-BI': 'SEK',
    'sw-CD': 'SEK',
    'sw-KE': 'SEK',
    'sw-MZ': 'SEK',
    'sw-SO': 'SEK',
    'sw-TZ': 'SEK',
    'sw-UG': 'SEK',
    'sw-YT': 'SEK',
    'sw-ZA': 'SEK',
    'ta-IN': 'INR',
    'ta-LK': 'INR',
    'ta-MU': 'INR',
    'ta-MY': 'INR',
    'ta-RE': 'INR',
    'ta-SG': 'INR',
    'te-IN': 'INR',
    'th-TH': 'THB',
    'ti-ER': 'ERN',
    'ti-ET': 'ETB',
    'ti-IL': 'ETB',
    'tk-AF': 'ETB',
    'tk-IR': 'ETB',
    'tk-TM': 'TMM',
    'tl-PH': 'PHP',
    'tl-US': 'PHP',
    'tn-BW': 'PHP',
    'tn-NA': 'PHP',
    'tn-ZA': 'ZAR',
    'tn-ZW': 'ZAR',
    'to-TO': 'ZAR',
    'tr-BG': 'ZAR',
    'tr-CY': 'TRY',
    'tr-DE': 'TRY',
    'tr-GR': 'TRY',
    'tr-MK': 'TRY',
    'tr-NL': 'TRY',
    'tr-RO': 'TRY',
    'tr-TR': 'TRY',
    'tr-UA': 'TRY',
    'tr-UZ': 'TRY',
    'ts-MZ': 'TRY',
    'ts-SZ': 'TRY',
    'ts-ZA': 'ZAR',
    'tt-RU': 'RUB',
    'ty-PF': 'RUB',
    'uk-PL': 'RUB',
    'uk-SK': 'RUB',
    'uk-UA': 'UAH',
    'ur-IN': 'UAH',
    'ur-MU': 'UAH',
    'ur-PK': 'PKR',
    've-ZA': 'ZAR',
    've-ZW': 'ZAR',
    'vi-CN': 'ZAR',
    'vi-US': 'ZAR',
    'vi-VN': 'VND',
    'wa-BE': 'EUR',
    'xh-LS': 'EUR',
    'xh-ZA': 'ZAR',
    'yi-UA': 'ZAR',
    'yo-BJ': 'ZAR',
    'yo-NG': 'NGN',
    'za-CN': 'NGN',
    'zh-CN': 'CNY',
    'zh-HK': 'HKD',
    'zh-TW': 'TWD',
    'zu-LS': 'TWD',
    'zu-MW': 'TWD',
    'zu-MZ': 'TWD',
    'zu-SZ': 'TWD',
    'zu-ZA': 'ZAR'
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-locale.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var defaultConfig = {
    localeConfig: {
        global: {},
        localeBased: {}
    },
    defaultLocale: 'en-US',
    localeToCurrencyMapping: LOCALE_CURRENCY,
    langToLocaleMapping: {}
};
/** @type {?} */
var LOCALE_DEFAULT_LOCALE = new InjectionToken('DEFAULT_LOCALE');
/** @type {?} */
var LOCALE_LANG_MAPPING = new InjectionToken('LOCALE_LANG_MAPPING');
/** @type {?} */
var LOCALE_CONFIG = new InjectionToken('LOCALE_CONFIG');
/** @type {?} */
var LOCALE_CURRENCY_MAPPING = new InjectionToken('LOCALE_CURRENCY_MAPPING');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-locale.transformers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var TRANSLOCO_DATE_TRANSFORMER = new InjectionToken('TRANSLOCO_DATE_TRANSFORMER');
/** @type {?} */
var TRANSLOCO_NUMBER_TRANSFORMER = new InjectionToken('TRANSLOCO_NUMBER_TRANSFORMER');
var DefaultDateTransformer = /** @class */ (function () {
    function DefaultDateTransformer() {
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @return {?}
     */
    DefaultDateTransformer.prototype.transform = /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @return {?}
     */
    function (date, locale, options) {
        return localizeDate(date, locale, options);
    };
    return DefaultDateTransformer;
}());
var DefaultNumberTransformer = /** @class */ (function () {
    function DefaultNumberTransformer() {
    }
    /**
     * @param {?} value
     * @param {?} type
     * @param {?} locale
     * @param {?} options
     * @return {?}
     */
    DefaultNumberTransformer.prototype.transform = /**
     * @param {?} value
     * @param {?} type
     * @param {?} locale
     * @param {?} options
     * @return {?}
     */
    function (value, type, locale, options) {
        return localizeNumber(value, locale, __assign({}, options, { style: type }));
    };
    return DefaultNumberTransformer;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-locale.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoLocaleService = /** @class */ (function () {
    function TranslocoLocaleService(translocoService, langLocaleMapping, defaultLocale, localeConfig, localeCurrencyMapping, numberTransformer, dateTransformer) {
        this.translocoService = translocoService;
        this.langLocaleMapping = langLocaleMapping;
        this.defaultLocale = defaultLocale;
        this.localeConfig = localeConfig;
        this.localeCurrencyMapping = localeCurrencyMapping;
        this.numberTransformer = numberTransformer;
        this.dateTransformer = dateTransformer;
        this._locale = defaultLocale || this.toLocale(this.translocoService.getActiveLang());
        this.locale = new BehaviorSubject(this._locale);
        this.localeChanges$ = this.locale.asObservable().pipe(distinctUntilChanged());
        this.subscription = translocoService.langChanges$
            .pipe(map(this.toLocale.bind(this)), filter((/**
         * @param {?} lang
         * @return {?}
         */
        function (lang) { return !!lang; })))
            .subscribe(this.setLocale.bind(this));
    }
    /**
     * @return {?}
     */
    TranslocoLocaleService.prototype.getLocale = /**
     * @return {?}
     */
    function () {
        return this._locale;
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    TranslocoLocaleService.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        if (!isLocaleFormat(locale)) {
            console.error(locale + " isn't a valid locale format");
            return false;
        }
        this.locale.next(locale);
        this._locale = locale;
    };
    /**
     * Get the currency symbol for the currently set locale.
     */
    /**
     * Get the currency symbol for the currently set locale.
     * @param {?=} locale
     * @return {?}
     */
    TranslocoLocaleService.prototype.getCurrencySymbol = /**
     * Get the currency symbol for the currently set locale.
     * @param {?=} locale
     * @return {?}
     */
    function (locale) {
        if (locale === void 0) { locale = this.getLocale(); }
        /** @type {?} */
        var currency = this.localeCurrencyMapping[locale];
        /** @type {?} */
        var numberFormat = new Intl.NumberFormat(locale, {
            style: 'currency',
            currencyDisplay: 'symbol',
            currency: currency,
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        });
        /** @type {?} */
        var pivot = 0;
        return numberFormat
            .format(pivot)
            .split(pivot.toString())
            .map((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element.trim(); }))
            .find((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return !!element; }));
    };
    /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object, a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * @example
     *
     * localizeDate(new Date(2019, 9, 7, 12, 0, 0)) // 10/7/2019
     * localizeDate(date, 'en-US', { dateStyle: 'medium', timeStyle: 'medium' }) // Sep 10, 2019, 10:46:12 PM
     * localizeDate(date) 'en-US', { timeZone: 'UTC', timeStyle: 'full' } // 7:40:32 PM Coordinated Universal Time
     * localizeDate(1, 'en-US', { dateStyle: 'medium' }) // Jan 1, 1970
     * localizeDate('2019-02-08', 'en-US', { dateStyle: 'medium' }) // Feb 8, 2019
     */
    /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object, a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * \@example
     *
     * localizeDate(new Date(2019, 9, 7, 12, 0, 0)) // 10/7/2019
     * localizeDate(date, 'en-US', { dateStyle: 'medium', timeStyle: 'medium' }) // Sep 10, 2019, 10:46:12 PM
     * localizeDate(date) 'en-US', { timeZone: 'UTC', timeStyle: 'full' } // 7:40:32 PM Coordinated Universal Time
     * localizeDate(1, 'en-US', { dateStyle: 'medium' }) // Jan 1, 1970
     * localizeDate('2019-02-08', 'en-US', { dateStyle: 'medium' }) // Feb 8, 2019
     * @param {?} date
     * @param {?=} locale
     * @param {?=} options
     * @return {?}
     */
    TranslocoLocaleService.prototype.localizeDate = /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object, a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * \@example
     *
     * localizeDate(new Date(2019, 9, 7, 12, 0, 0)) // 10/7/2019
     * localizeDate(date, 'en-US', { dateStyle: 'medium', timeStyle: 'medium' }) // Sep 10, 2019, 10:46:12 PM
     * localizeDate(date) 'en-US', { timeZone: 'UTC', timeStyle: 'full' } // 7:40:32 PM Coordinated Universal Time
     * localizeDate(1, 'en-US', { dateStyle: 'medium' }) // Jan 1, 1970
     * localizeDate('2019-02-08', 'en-US', { dateStyle: 'medium' }) // Feb 8, 2019
     * @param {?} date
     * @param {?=} locale
     * @param {?=} options
     * @return {?}
     */
    function (date, locale, options) {
        if (locale === void 0) { locale = this.getLocale(); }
        options = options ? options : getDefaultOptions(locale, 'date', this.localeConfig);
        return this.dateTransformer.transform(toDate(date), locale, options);
    };
    /**
     * Transform a number into the locale's number format according to the number type.
     *
     * localizeNumber(1234567890, 'decimal') // 1,234,567,890
     * localizeNumber(0.5, 'percent') // 50%
     * localizeNumber(1000, 'currency') // $1,000.00
     */
    /**
     * Transform a number into the locale's number format according to the number type.
     *
     * localizeNumber(1234567890, 'decimal') // 1,234,567,890
     * localizeNumber(0.5, 'percent') // 50%
     * localizeNumber(1000, 'currency') // $1,000.00
     * @param {?} value
     * @param {?} type
     * @param {?=} locale
     * @param {?=} options
     * @return {?}
     */
    TranslocoLocaleService.prototype.localizeNumber = /**
     * Transform a number into the locale's number format according to the number type.
     *
     * localizeNumber(1234567890, 'decimal') // 1,234,567,890
     * localizeNumber(0.5, 'percent') // 50%
     * localizeNumber(1000, 'currency') // $1,000.00
     * @param {?} value
     * @param {?} type
     * @param {?=} locale
     * @param {?=} options
     * @return {?}
     */
    function (value, type, locale, options) {
        if (locale === void 0) { locale = this.getLocale(); }
        options = options ? options : getDefaultOptions(locale, type, this.localeConfig);
        if (type === 'currency') {
            options = __assign({}, options, { currency: options.currency || this._resolveCurrencyCode(locale) });
        }
        return this.numberTransformer.transform(value, type, locale, options);
    };
    /**
     * @internal
     */
    /**
     * \@internal
     * @param {?=} locale
     * @return {?}
     */
    TranslocoLocaleService.prototype._resolveCurrencyCode = /**
     * \@internal
     * @param {?=} locale
     * @return {?}
     */
    function (locale) {
        if (locale === void 0) { locale = this.getLocale(); }
        return this.localeCurrencyMapping[locale] || 'USD';
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    TranslocoLocaleService.prototype.toLocale = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (isLocaleFormat(val)) {
            return val;
        }
        if (this.langLocaleMapping[val]) {
            return this.langLocaleMapping[val];
        }
        return null;
    };
    /**
     * @return {?}
     */
    TranslocoLocaleService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    TranslocoLocaleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TranslocoLocaleService.ctorParameters = function () { return [
        { type: TranslocoService },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_LANG_MAPPING,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_DEFAULT_LOCALE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CURRENCY_MAPPING,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TRANSLOCO_NUMBER_TRANSFORMER,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TRANSLOCO_DATE_TRANSFORMER,] }] }
    ]; };
    /** @nocollapse */ TranslocoLocaleService.ngInjectableDef = defineInjectable({ factory: function TranslocoLocaleService_Factory() { return new TranslocoLocaleService(inject(TranslocoService), inject(LOCALE_LANG_MAPPING), inject(LOCALE_DEFAULT_LOCALE), inject(LOCALE_CONFIG), inject(LOCALE_CURRENCY_MAPPING), inject(TRANSLOCO_NUMBER_TRANSFORMER), inject(TRANSLOCO_DATE_TRANSFORMER)); }, token: TranslocoLocaleService, providedIn: "root" });
    return TranslocoLocaleService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-locale.types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/transloco-locale.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoLocalePipe = /** @class */ (function () {
    function TranslocoLocalePipe(translocoLocaleService, cdr) {
        var _this = this;
        this.translocoLocaleService = translocoLocaleService;
        this.cdr = cdr;
        this.subscription = this.translocoLocaleService.localeChanges$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.cdr.markForCheck();
        }));
    }
    /**
     * @protected
     * @param {?} locale
     * @return {?}
     */
    TranslocoLocalePipe.prototype.getLocale = /**
     * @protected
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        return locale || this.translocoLocaleService.getLocale();
    };
    /**
     * @return {?}
     */
    TranslocoLocalePipe.prototype.onDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    return TranslocoLocalePipe;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/transloco-currency.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoCurrencyPipe = /** @class */ (function (_super) {
    __extends(TranslocoCurrencyPipe, _super);
    function TranslocoCurrencyPipe(translocoLocaleService, cdr, localeConfig) {
        var _this = _super.call(this, translocoLocaleService, cdr) || this;
        _this.translocoLocaleService = translocoLocaleService;
        _this.cdr = cdr;
        _this.localeConfig = localeConfig;
        return _this;
    }
    /**
     * Transform a given number into the locale's currency format.
     *
     * @example
     *
     * 1000000 | translocoCurrency: 'symbol' : {} : USD // $1,000,000.00
     * 1000000 | translocoCurrency: 'name' : {} : USD // 1,000,000.00 US dollars
     * 1000000 | translocoCurrency: 'symbol' : {minimumFractionDigits: 0 } : USD // $1,000,000
     *
     */
    /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1000000 | translocoCurrency: 'symbol' : {} : USD // $1,000,000.00
     * 1000000 | translocoCurrency: 'name' : {} : USD // 1,000,000.00 US dollars
     * 1000000 | translocoCurrency: 'symbol' : {minimumFractionDigits: 0 } : USD // $1,000,000
     *
     * @param {?} value
     * @param {?=} display
     * @param {?=} numberFormatOptions
     * @param {?=} currencyCode
     * @param {?=} locale
     * @return {?}
     */
    TranslocoCurrencyPipe.prototype.transform = /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1000000 | translocoCurrency: 'symbol' : {} : USD // $1,000,000.00
     * 1000000 | translocoCurrency: 'name' : {} : USD // 1,000,000.00 US dollars
     * 1000000 | translocoCurrency: 'symbol' : {minimumFractionDigits: 0 } : USD // $1,000,000
     *
     * @param {?} value
     * @param {?=} display
     * @param {?=} numberFormatOptions
     * @param {?=} currencyCode
     * @param {?=} locale
     * @return {?}
     */
    function (value, display, numberFormatOptions, currencyCode, locale) {
        if (display === void 0) { display = 'symbol'; }
        if (numberFormatOptions === void 0) { numberFormatOptions = {}; }
        if (isNil(value))
            return '';
        locale = this.getLocale(locale);
        /** @type {?} */
        var options = __assign({}, getDefaultOptions(locale, 'currency', this.localeConfig), numberFormatOptions, { currencyDisplay: display, currency: currencyCode || this.translocoLocaleService._resolveCurrencyCode() });
        return this.translocoLocaleService.localizeNumber(value, 'currency', locale, options);
    };
    /**
     * @return {?}
     */
    TranslocoCurrencyPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.onDestroy.call(this);
    };
    TranslocoCurrencyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'translocoCurrency',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    TranslocoCurrencyPipe.ctorParameters = function () { return [
        { type: TranslocoLocaleService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] }] }
    ]; };
    return TranslocoCurrencyPipe;
}(TranslocoLocalePipe));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/transloco-date.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoDatePipe = /** @class */ (function (_super) {
    __extends(TranslocoDatePipe, _super);
    function TranslocoDatePipe(translocoLocaleService, cdr, localeConfig) {
        var _this = _super.call(this, translocoLocaleService, cdr) || this;
        _this.translocoLocaleService = translocoLocaleService;
        _this.cdr = cdr;
        _this.localeConfig = localeConfig;
        return _this;
    }
    /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object,  a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * @example
     *
     * date | translocoDate: {} : en-US // 9/10/2019
     * date | translocoDate: { dateStyle: 'medium', timeStyle: 'medium' } : en-US // Sep 10, 2019, 10:46:12 PM
     * date | translocoDate: { timeZone: 'UTC', timeStyle: 'full' } : en-US // 7:40:32 PM Coordinated Universal Time
     * 1 | translocoDate: { dateStyle: 'medium' } // Jan 1, 1970
     * '2019-02-08' | translocoDate: { dateStyle: 'medium' } // Feb 8, 2019
     */
    /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object,  a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * \@example
     *
     * date | translocoDate: {} : en-US // 9/10/2019
     * date | translocoDate: { dateStyle: 'medium', timeStyle: 'medium' } : en-US // Sep 10, 2019, 10:46:12 PM
     * date | translocoDate: { timeZone: 'UTC', timeStyle: 'full' } : en-US // 7:40:32 PM Coordinated Universal Time
     * 1 | translocoDate: { dateStyle: 'medium' } // Jan 1, 1970
     * '2019-02-08' | translocoDate: { dateStyle: 'medium' } // Feb 8, 2019
     * @param {?} date
     * @param {?=} options
     * @param {?=} locale
     * @return {?}
     */
    TranslocoDatePipe.prototype.transform = /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object,  a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * \@example
     *
     * date | translocoDate: {} : en-US // 9/10/2019
     * date | translocoDate: { dateStyle: 'medium', timeStyle: 'medium' } : en-US // Sep 10, 2019, 10:46:12 PM
     * date | translocoDate: { timeZone: 'UTC', timeStyle: 'full' } : en-US // 7:40:32 PM Coordinated Universal Time
     * 1 | translocoDate: { dateStyle: 'medium' } // Jan 1, 1970
     * '2019-02-08' | translocoDate: { dateStyle: 'medium' } // Feb 8, 2019
     * @param {?} date
     * @param {?=} options
     * @param {?=} locale
     * @return {?}
     */
    function (date, options, locale) {
        if (options === void 0) { options = {}; }
        if (isNil(date))
            return '';
        locale = this.getLocale(locale);
        return this.translocoLocaleService.localizeDate(date, locale, __assign({}, getDefaultOptions(locale, 'date', this.localeConfig), options));
    };
    /**
     * @return {?}
     */
    TranslocoDatePipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.onDestroy.call(this);
    };
    TranslocoDatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'translocoDate',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    TranslocoDatePipe.ctorParameters = function () { return [
        { type: TranslocoLocaleService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] }] }
    ]; };
    return TranslocoDatePipe;
}(TranslocoLocalePipe));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/transloco-decimal.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoDecimalPipe = /** @class */ (function (_super) {
    __extends(TranslocoDecimalPipe, _super);
    function TranslocoDecimalPipe(translocoLocaleService, cdr, localeConfig) {
        var _this = _super.call(this, translocoLocaleService, cdr) || this;
        _this.translocoLocaleService = translocoLocaleService;
        _this.cdr = cdr;
        _this.localeConfig = localeConfig;
        return _this;
    }
    /**
     * Transform a given number into the locale's currency format.
     *
     * @example
     *
     * 1234567890 | translocoDecimal: {} : en-US // 1,234,567,890
     * 1234567890 | translocoDecimal: {useGrouping: false}: en-US // 1234567890
     *
     */
    /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1234567890 | translocoDecimal: {} : en-US // 1,234,567,890
     * 1234567890 | translocoDecimal: {useGrouping: false}: en-US // 1234567890
     *
     * @param {?} value
     * @param {?=} numberFormatOptions
     * @param {?=} locale
     * @return {?}
     */
    TranslocoDecimalPipe.prototype.transform = /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1234567890 | translocoDecimal: {} : en-US // 1,234,567,890
     * 1234567890 | translocoDecimal: {useGrouping: false}: en-US // 1234567890
     *
     * @param {?} value
     * @param {?=} numberFormatOptions
     * @param {?=} locale
     * @return {?}
     */
    function (value, numberFormatOptions, locale) {
        if (numberFormatOptions === void 0) { numberFormatOptions = {}; }
        if (isNil(value))
            return '';
        locale = this.getLocale(locale);
        /** @type {?} */
        var options = __assign({}, getDefaultOptions(locale, 'decimal', this.localeConfig), numberFormatOptions);
        return this.translocoLocaleService.localizeNumber(value, 'decimal', locale, options);
    };
    /**
     * @return {?}
     */
    TranslocoDecimalPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.onDestroy.call(this);
    };
    TranslocoDecimalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'translocoDecimal',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    TranslocoDecimalPipe.ctorParameters = function () { return [
        { type: TranslocoLocaleService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] }] }
    ]; };
    return TranslocoDecimalPipe;
}(TranslocoLocalePipe));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/transloco-percent.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslocoPercentPipe = /** @class */ (function (_super) {
    __extends(TranslocoPercentPipe, _super);
    function TranslocoPercentPipe(translocoLocaleService, cdr, localeConfig) {
        var _this = _super.call(this, translocoLocaleService, cdr) || this;
        _this.translocoLocaleService = translocoLocaleService;
        _this.cdr = cdr;
        _this.localeConfig = localeConfig;
        return _this;
    }
    /**
     * Transform a given number into the locale's currency format.
     *
     * @example
     *
     * 1 | translocoPercent : {} : en-US // 100%
     * "1" | translocoPercent : {} : en-US // 100%
     *
     */
    /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1 | translocoPercent : {} : en-US // 100%
     * "1" | translocoPercent : {} : en-US // 100%
     *
     * @param {?} value
     * @param {?=} numberFormatOptions
     * @param {?=} locale
     * @return {?}
     */
    TranslocoPercentPipe.prototype.transform = /**
     * Transform a given number into the locale's currency format.
     *
     * \@example
     *
     * 1 | translocoPercent : {} : en-US // 100%
     * "1" | translocoPercent : {} : en-US // 100%
     *
     * @param {?} value
     * @param {?=} numberFormatOptions
     * @param {?=} locale
     * @return {?}
     */
    function (value, numberFormatOptions, locale) {
        if (numberFormatOptions === void 0) { numberFormatOptions = {}; }
        if (isNil(value))
            return '';
        locale = this.getLocale(locale);
        /** @type {?} */
        var options = __assign({}, getDefaultOptions(locale, 'percent', this.localeConfig), numberFormatOptions);
        return this.translocoLocaleService.localizeNumber(value, 'percent', locale, options);
    };
    /**
     * @return {?}
     */
    TranslocoPercentPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.onDestroy.call(this);
    };
    TranslocoPercentPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'translocoPercent',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    TranslocoPercentPipe.ctorParameters = function () { return [
        { type: TranslocoLocaleService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] }] }
    ]; };
    return TranslocoPercentPipe;
}(TranslocoLocalePipe));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-locale.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var pipes = [TranslocoCurrencyPipe, TranslocoDatePipe, TranslocoDecimalPipe, TranslocoPercentPipe];
var TranslocoLocaleModule = /** @class */ (function () {
    function TranslocoLocaleModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    TranslocoLocaleModule.init = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: TranslocoLocaleModule,
            providers: [
                {
                    provide: LOCALE_LANG_MAPPING,
                    useValue: config.langToLocaleMapping || defaultConfig.langToLocaleMapping
                },
                {
                    provide: LOCALE_CONFIG,
                    useValue: config.localeConfig || defaultConfig.localeConfig
                },
                {
                    provide: LOCALE_CURRENCY_MAPPING,
                    useValue: config.localeToCurrencyMapping || defaultConfig.localeToCurrencyMapping
                },
                {
                    provide: LOCALE_DEFAULT_LOCALE,
                    useValue: config.defaultLocale || defaultConfig.defaultLocale
                },
                {
                    provide: TRANSLOCO_DATE_TRANSFORMER,
                    useClass: DefaultDateTransformer
                },
                {
                    provide: TRANSLOCO_NUMBER_TRANSFORMER,
                    useClass: DefaultNumberTransformer
                }
            ]
        };
    };
    TranslocoLocaleModule.decorators = [
        { type: NgModule, args: [{
                    declarations: pipes,
                    exports: pipes
                },] }
    ];
    return TranslocoLocaleModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngneat-transloco-locale.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TranslocoLocaleService, defaultConfig, LOCALE_DEFAULT_LOCALE, LOCALE_LANG_MAPPING, LOCALE_CONFIG, LOCALE_CURRENCY_MAPPING, pipes, TranslocoLocaleModule, TranslocoDatePipe, TranslocoCurrencyPipe, TranslocoPercentPipe, TranslocoDecimalPipe, TRANSLOCO_DATE_TRANSFORMER, TRANSLOCO_NUMBER_TRANSFORMER, DefaultDateTransformer, DefaultNumberTransformer, TranslocoLocalePipe as ɵa };

//# sourceMappingURL=ngneat-transloco-locale.js.map