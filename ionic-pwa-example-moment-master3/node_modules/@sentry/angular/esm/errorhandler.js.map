{"version":3,"file":"errorhandler.js","sourceRoot":"","sources":["../src/errorhandler.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAuC,UAAU,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAiB1C;;GAEG;AAEH;IAGE,4BAAmB,OAA6B;QAC9C,IAAI,CAAC,QAAQ,cACX,SAAS,EAAE,IAAI,IACZ,OAAO,CACX,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,wCAAW,GAAlB,UAAmB,KAAc;QAC/B,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,uBAAuB,CAAC;QAE5E,mDAAmD;QACnD,IAAM,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAExD,6EAA6E;QAC7E,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC3B,sCAAsC;YACtC,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;SAC/B;QAED,mEAAmE;QACnE,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YAC5B,MAAM,CAAC,gBAAgB,uBAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAE,OAAO,SAAA,IAAG,CAAC;SACtE;IACH,CAAC;IAED;;OAEG;IACO,0CAAa,GAAvB,UAAwB,KAAc;QACpC,gDAAgD;QAChD,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC3B,IAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;SACzD;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACO,8CAAiB,GAA3B,UAA4B,cAAuB;QACjD,IAAI,KAAK,GAAG,cAAc,CAAC;QAE3B,+BAA+B;QAC/B,kFAAkF;QAClF,IAAI,KAAK,IAAK,KAAoC,CAAC,eAAe,EAAE;YAClE,KAAK,GAAI,KAAoC,CAAC,eAAe,CAAC;SAC/D;QAED,qDAAqD;QACrD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,KAAK,EAAE;YACvD,OAAO,KAAK,CAAC;SACd;QAED,4EAA4E;QAC5E,IAAI,KAAK,YAAY,iBAAiB,EAAE;YACtC,uGAAuG;YACvG,IAAI,KAAK,CAAC,KAAK,YAAY,KAAK,EAAE;gBAChC,OAAO,KAAK,CAAC,KAAK,CAAC;aACpB;YAED,+EAA+E;YAC/E,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;gBAC5D,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;aAC5B;YAED,wEAAwE;YACxE,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;gBACnC,OAAO,0BAAwB,KAAK,CAAC,MAAM,qBAAe,KAAK,CAAC,KAAK,OAAG,CAAC;aAC1E;YAED,qFAAqF;YACrF,OAAO,KAAK,CAAC,OAAO,CAAC;SACtB;QAED,4DAA4D;QAC5D,OAAO,IAAI,CAAC;IACd,CAAC;IApFG,kBAAkB;QADvB,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;OAC7B,kBAAkB,CAqFvB;IAAD,yBAAC;CAAA,AArFD,IAqFC;AAED;;GAEG;AACH,SAAS,kBAAkB,CAAC,MAA4B;IACtD,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,OAAO,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,CAAC","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler as AngularErrorHandler, Injectable } from '@angular/core';\nimport * as Sentry from '@sentry/browser';\n\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showDialog?: boolean;\n  dialogOptions?: Sentry.ReportDialogOptions;\n  /**\n   * Custom implementation of error extraction from the raw value captured by the Angular.\n   * @param error Value captured by Angular's ErrorHandler provider\n   * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n   */\n  extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass SentryErrorHandler implements AngularErrorHandler {\n  protected readonly _options: ErrorHandlerOptions;\n\n  public constructor(options?: ErrorHandlerOptions) {\n    this._options = {\n      logErrors: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Handled unknown error';\n\n    // Capture handled exception and send it to Sentry.\n    const eventId = Sentry.captureException(extractedError);\n\n    // When in development mode, log the error to console for immediate feedback.\n    if (this._options.logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(extractedError);\n    }\n\n    // Optionally show user dialog to provide details on what happened.\n    if (this._options.showDialog) {\n      Sentry.showReportDialog({ ...this._options.dialogOptions, eventId });\n    }\n  }\n\n  /**\n   * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n   */\n  protected _extractError(error: unknown): unknown {\n    // Allow custom overrides of extracting function\n    if (this._options.extractor) {\n      const defaultExtractor = this._defaultExtractor.bind(this);\n      return this._options.extractor(error, defaultExtractor);\n    }\n\n    return this._defaultExtractor(error);\n  }\n\n  /**\n   * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n   */\n  protected _defaultExtractor(errorCandidate: unknown): unknown {\n    let error = errorCandidate;\n\n    // Try to unwrap zone.js error.\n    // https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\n    if (error && (error as { ngOriginalError: Error }).ngOriginalError) {\n      error = (error as { ngOriginalError: Error }).ngOriginalError;\n    }\n\n    // We can handle messages and Error objects directly.\n    if (typeof error === 'string' || error instanceof Error) {\n      return error;\n    }\n\n    // If it's http module error, extract as much information from it as we can.\n    if (error instanceof HttpErrorResponse) {\n      // The `error` property of http exception can be either an `Error` object, which we can use directly...\n      if (error.error instanceof Error) {\n        return error.error;\n      }\n\n      // ... or an`ErrorEvent`, which can provide us with the message but no stack...\n      if (error.error instanceof ErrorEvent && error.error.message) {\n        return error.error.message;\n      }\n\n      // ...or the request body itself, which we can use as a message instead.\n      if (typeof error.error === 'string') {\n        return `Server returned code ${error.status} with body \"${error.error}\"`;\n      }\n\n      // If we don't have any detailed information, fallback to the request message itself.\n      return error.message;\n    }\n\n    // Nothing was extracted, fallback to default error message.\n    return null;\n  }\n}\n\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\nfunction createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler {\n  return new SentryErrorHandler(config);\n}\n\nexport { createErrorHandler, SentryErrorHandler };\n"]}